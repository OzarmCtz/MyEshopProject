// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package mysql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createAppSettingsStmt, err = db.PrepareContext(ctx, createAppSettings); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppSettings: %w", err)
	}
	if q.createDiscountStmt, err = db.PrepareContext(ctx, createDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDiscount: %w", err)
	}
	if q.createDiscountLinkStmt, err = db.PrepareContext(ctx, createDiscountLink); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDiscountLink: %w", err)
	}
	if q.createGroupPrivilegeStmt, err = db.PrepareContext(ctx, createGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupPrivilege: %w", err)
	}
	if q.createGroupPrivilegeLinkStmt, err = db.PrepareContext(ctx, createGroupPrivilegeLink); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupPrivilegeLink: %w", err)
	}
	if q.createGroupUserStmt, err = db.PrepareContext(ctx, createGroupUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupUser: %w", err)
	}
	if q.createGroupUserLinkStmt, err = db.PrepareContext(ctx, createGroupUserLink); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupUserLink: %w", err)
	}
	if q.createGroupUserLinkByGroupNameStmt, err = db.PrepareContext(ctx, createGroupUserLinkByGroupName); err != nil {
		return nil, fmt.Errorf("error preparing query CreateGroupUserLinkByGroupName: %w", err)
	}
	if q.createItemStmt, err = db.PrepareContext(ctx, createItem); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItem: %w", err)
	}
	if q.createItemCategoryStmt, err = db.PrepareContext(ctx, createItemCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemCategory: %w", err)
	}
	if q.createItemReviewStmt, err = db.PrepareContext(ctx, createItemReview); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemReview: %w", err)
	}
	if q.createItemSubCategoryStmt, err = db.PrepareContext(ctx, createItemSubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemSubCategory: %w", err)
	}
	if q.createItemsCategoryLinkStmt, err = db.PrepareContext(ctx, createItemsCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemsCategoryLink: %w", err)
	}
	if q.createItemsSubCategoryLinkStmt, err = db.PrepareContext(ctx, createItemsSubCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemsSubCategoryLink: %w", err)
	}
	if q.createItemsSubCategoryLinkBySubCategoryNameStmt, err = db.PrepareContext(ctx, createItemsSubCategoryLinkBySubCategoryName); err != nil {
		return nil, fmt.Errorf("error preparing query CreateItemsSubCategoryLinkBySubCategoryName: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserBasketStmt, err = db.PrepareContext(ctx, createUserBasket); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserBasket: %w", err)
	}
	if q.createUserWishListStmt, err = db.PrepareContext(ctx, createUserWishList); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserWishList: %w", err)
	}
	if q.deleteAppSettingsStmt, err = db.PrepareContext(ctx, deleteAppSettings); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAppSettings: %w", err)
	}
	if q.deleteDiscountStmt, err = db.PrepareContext(ctx, deleteDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDiscount: %w", err)
	}
	if q.deleteDiscountLinkStmt, err = db.PrepareContext(ctx, deleteDiscountLink); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDiscountLink: %w", err)
	}
	if q.deleteGroupPrivilegeStmt, err = db.PrepareContext(ctx, deleteGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupPrivilege: %w", err)
	}
	if q.deleteGroupPrivilegeLinkStmt, err = db.PrepareContext(ctx, deleteGroupPrivilegeLink); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupPrivilegeLink: %w", err)
	}
	if q.deleteGroupUserStmt, err = db.PrepareContext(ctx, deleteGroupUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupUser: %w", err)
	}
	if q.deleteGroupUserLinkStmt, err = db.PrepareContext(ctx, deleteGroupUserLink); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroupUserLink: %w", err)
	}
	if q.deleteItemStmt, err = db.PrepareContext(ctx, deleteItem); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItem: %w", err)
	}
	if q.deleteItemCategoryStmt, err = db.PrepareContext(ctx, deleteItemCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemCategory: %w", err)
	}
	if q.deleteItemReviewStmt, err = db.PrepareContext(ctx, deleteItemReview); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemReview: %w", err)
	}
	if q.deleteItemSubCategoryStmt, err = db.PrepareContext(ctx, deleteItemSubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemSubCategory: %w", err)
	}
	if q.deleteItemsCategoryLinkStmt, err = db.PrepareContext(ctx, deleteItemsCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemsCategoryLink: %w", err)
	}
	if q.deleteItemsSubCategoryLinkStmt, err = db.PrepareContext(ctx, deleteItemsSubCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteItemsSubCategoryLink: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserBasketByUserAndItemsStmt, err = db.PrepareContext(ctx, deleteUserBasketByUserAndItems); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserBasketByUserAndItems: %w", err)
	}
	if q.deleteUserWishListByUserAndItemsStmt, err = db.PrepareContext(ctx, deleteUserWishListByUserAndItems); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserWishListByUserAndItems: %w", err)
	}
	if q.getAppSettingsStmt, err = db.PrepareContext(ctx, getAppSettings); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppSettings: %w", err)
	}
	if q.getAppSettingsByKeyStmt, err = db.PrepareContext(ctx, getAppSettingsByKey); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppSettingsByKey: %w", err)
	}
	if q.getDiscountStmt, err = db.PrepareContext(ctx, getDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query GetDiscount: %w", err)
	}
	if q.getDiscountByCodeStmt, err = db.PrepareContext(ctx, getDiscountByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetDiscountByCode: %w", err)
	}
	if q.getDiscountLinkStmt, err = db.PrepareContext(ctx, getDiscountLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetDiscountLink: %w", err)
	}
	if q.getGroupByNameStmt, err = db.PrepareContext(ctx, getGroupByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupByName: %w", err)
	}
	if q.getGroupPrivilegeStmt, err = db.PrepareContext(ctx, getGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPrivilege: %w", err)
	}
	if q.getGroupPrivilegeLinkStmt, err = db.PrepareContext(ctx, getGroupPrivilegeLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPrivilegeLink: %w", err)
	}
	if q.getGroupPrivilegesByUserIdStmt, err = db.PrepareContext(ctx, getGroupPrivilegesByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupPrivilegesByUserId: %w", err)
	}
	if q.getGroupUserStmt, err = db.PrepareContext(ctx, getGroupUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupUser: %w", err)
	}
	if q.getGroupUserLinkStmt, err = db.PrepareContext(ctx, getGroupUserLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupUserLink: %w", err)
	}
	if q.getGroupUserLinkByUserStmt, err = db.PrepareContext(ctx, getGroupUserLinkByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroupUserLinkByUser: %w", err)
	}
	if q.getItemStmt, err = db.PrepareContext(ctx, getItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetItem: %w", err)
	}
	if q.getItemCategoryStmt, err = db.PrepareContext(ctx, getItemCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemCategory: %w", err)
	}
	if q.getItemCategoryLinkStmt, err = db.PrepareContext(ctx, getItemCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemCategoryLink: %w", err)
	}
	if q.getItemCategoryLinkBySubCategoryStmt, err = db.PrepareContext(ctx, getItemCategoryLinkBySubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemCategoryLinkBySubCategory: %w", err)
	}
	if q.getItemReviewStmt, err = db.PrepareContext(ctx, getItemReview); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemReview: %w", err)
	}
	if q.getItemSubCategoryStmt, err = db.PrepareContext(ctx, getItemSubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemSubCategory: %w", err)
	}
	if q.getItemSubCategoryAndCategoryLinkedStmt, err = db.PrepareContext(ctx, getItemSubCategoryAndCategoryLinked); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemSubCategoryAndCategoryLinked: %w", err)
	}
	if q.getItemsSubCategoryLinkStmt, err = db.PrepareContext(ctx, getItemsSubCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemsSubCategoryLink: %w", err)
	}
	if q.getItemsSubCategoryLinkByItemStmt, err = db.PrepareContext(ctx, getItemsSubCategoryLinkByItem); err != nil {
		return nil, fmt.Errorf("error preparing query GetItemsSubCategoryLinkByItem: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserBasketStmt, err = db.PrepareContext(ctx, getUserBasket); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserBasket: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserWishListStmt, err = db.PrepareContext(ctx, getUserWishList); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserWishList: %w", err)
	}
	if q.listActiveItemsStmt, err = db.PrepareContext(ctx, listActiveItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveItems: %w", err)
	}
	if q.listAppSettingsStmt, err = db.PrepareContext(ctx, listAppSettings); err != nil {
		return nil, fmt.Errorf("error preparing query ListAppSettings: %w", err)
	}
	if q.listDiscountsStmt, err = db.PrepareContext(ctx, listDiscounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListDiscounts: %w", err)
	}
	if q.listDiscountsLinksStmt, err = db.PrepareContext(ctx, listDiscountsLinks); err != nil {
		return nil, fmt.Errorf("error preparing query ListDiscountsLinks: %w", err)
	}
	if q.listGroupPrivilegesLinkStmt, err = db.PrepareContext(ctx, listGroupPrivilegesLink); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupPrivilegesLink: %w", err)
	}
	if q.listGroupsPrivilegesStmt, err = db.PrepareContext(ctx, listGroupsPrivileges); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsPrivileges: %w", err)
	}
	if q.listGroupsUserByUserStmt, err = db.PrepareContext(ctx, listGroupsUserByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsUserByUser: %w", err)
	}
	if q.listGroupsUsersStmt, err = db.PrepareContext(ctx, listGroupsUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsUsers: %w", err)
	}
	if q.listGroupsUsersLinkStmt, err = db.PrepareContext(ctx, listGroupsUsersLink); err != nil {
		return nil, fmt.Errorf("error preparing query ListGroupsUsersLink: %w", err)
	}
	if q.listItemSubCategoryAndCategoryLinkedStmt, err = db.PrepareContext(ctx, listItemSubCategoryAndCategoryLinked); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemSubCategoryAndCategoryLinked: %w", err)
	}
	if q.listItemsStmt, err = db.PrepareContext(ctx, listItems); err != nil {
		return nil, fmt.Errorf("error preparing query ListItems: %w", err)
	}
	if q.listItemsCategoryStmt, err = db.PrepareContext(ctx, listItemsCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsCategory: %w", err)
	}
	if q.listItemsCategoryAndOccurenceStmt, err = db.PrepareContext(ctx, listItemsCategoryAndOccurence); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsCategoryAndOccurence: %w", err)
	}
	if q.listItemsCategoryLinkStmt, err = db.PrepareContext(ctx, listItemsCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsCategoryLink: %w", err)
	}
	if q.listItemsCategoryLinkByCategoryStmt, err = db.PrepareContext(ctx, listItemsCategoryLinkByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsCategoryLinkByCategory: %w", err)
	}
	if q.listItemsReviewsStmt, err = db.PrepareContext(ctx, listItemsReviews); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsReviews: %w", err)
	}
	if q.listItemsReviewsByItemIdStmt, err = db.PrepareContext(ctx, listItemsReviewsByItemId); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsReviewsByItemId: %w", err)
	}
	if q.listItemsReviewsByUserIdStmt, err = db.PrepareContext(ctx, listItemsReviewsByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsReviewsByUserId: %w", err)
	}
	if q.listItemsSubCategoryStmt, err = db.PrepareContext(ctx, listItemsSubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsSubCategory: %w", err)
	}
	if q.listItemsSubCategoryLinkStmt, err = db.PrepareContext(ctx, listItemsSubCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsSubCategoryLink: %w", err)
	}
	if q.listItemsSubCategoryLinkByCategoryStmt, err = db.PrepareContext(ctx, listItemsSubCategoryLinkByCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListItemsSubCategoryLinkByCategory: %w", err)
	}
	if q.listUserBasketByUserStmt, err = db.PrepareContext(ctx, listUserBasketByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserBasketByUser: %w", err)
	}
	if q.listUserWishListByUserStmt, err = db.PrepareContext(ctx, listUserWishListByUser); err != nil {
		return nil, fmt.Errorf("error preparing query ListUserWishListByUser: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateAppSettingsStmt, err = db.PrepareContext(ctx, updateAppSettings); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAppSettings: %w", err)
	}
	if q.updateDiscountStmt, err = db.PrepareContext(ctx, updateDiscount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDiscount: %w", err)
	}
	if q.updateDiscountLinkStmt, err = db.PrepareContext(ctx, updateDiscountLink); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDiscountLink: %w", err)
	}
	if q.updateGroupPrivilegeStmt, err = db.PrepareContext(ctx, updateGroupPrivilege); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupPrivilege: %w", err)
	}
	if q.updateGroupPrivilegeLinkStmt, err = db.PrepareContext(ctx, updateGroupPrivilegeLink); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupPrivilegeLink: %w", err)
	}
	if q.updateGroupUserStmt, err = db.PrepareContext(ctx, updateGroupUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupUser: %w", err)
	}
	if q.updateGroupUserLinkStmt, err = db.PrepareContext(ctx, updateGroupUserLink); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateGroupUserLink: %w", err)
	}
	if q.updateItemStmt, err = db.PrepareContext(ctx, updateItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItem: %w", err)
	}
	if q.updateItemCategoryStmt, err = db.PrepareContext(ctx, updateItemCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemCategory: %w", err)
	}
	if q.updateItemSubCategoryStmt, err = db.PrepareContext(ctx, updateItemSubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemSubCategory: %w", err)
	}
	if q.updateItemsCategoryLinkStmt, err = db.PrepareContext(ctx, updateItemsCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemsCategoryLink: %w", err)
	}
	if q.updateItemsCategoryLinkBySubCategoryStmt, err = db.PrepareContext(ctx, updateItemsCategoryLinkBySubCategory); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemsCategoryLinkBySubCategory: %w", err)
	}
	if q.updateItemsSubCategoryLinkStmt, err = db.PrepareContext(ctx, updateItemsSubCategoryLink); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemsSubCategoryLink: %w", err)
	}
	if q.updateItemsSubCategoryLinkByItemStmt, err = db.PrepareContext(ctx, updateItemsSubCategoryLinkByItem); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateItemsSubCategoryLinkByItem: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createAppSettingsStmt != nil {
		if cerr := q.createAppSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppSettingsStmt: %w", cerr)
		}
	}
	if q.createDiscountStmt != nil {
		if cerr := q.createDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDiscountStmt: %w", cerr)
		}
	}
	if q.createDiscountLinkStmt != nil {
		if cerr := q.createDiscountLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDiscountLinkStmt: %w", cerr)
		}
	}
	if q.createGroupPrivilegeStmt != nil {
		if cerr := q.createGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.createGroupPrivilegeLinkStmt != nil {
		if cerr := q.createGroupPrivilegeLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupPrivilegeLinkStmt: %w", cerr)
		}
	}
	if q.createGroupUserStmt != nil {
		if cerr := q.createGroupUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupUserStmt: %w", cerr)
		}
	}
	if q.createGroupUserLinkStmt != nil {
		if cerr := q.createGroupUserLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupUserLinkStmt: %w", cerr)
		}
	}
	if q.createGroupUserLinkByGroupNameStmt != nil {
		if cerr := q.createGroupUserLinkByGroupNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createGroupUserLinkByGroupNameStmt: %w", cerr)
		}
	}
	if q.createItemStmt != nil {
		if cerr := q.createItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemStmt: %w", cerr)
		}
	}
	if q.createItemCategoryStmt != nil {
		if cerr := q.createItemCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemCategoryStmt: %w", cerr)
		}
	}
	if q.createItemReviewStmt != nil {
		if cerr := q.createItemReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemReviewStmt: %w", cerr)
		}
	}
	if q.createItemSubCategoryStmt != nil {
		if cerr := q.createItemSubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemSubCategoryStmt: %w", cerr)
		}
	}
	if q.createItemsCategoryLinkStmt != nil {
		if cerr := q.createItemsCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemsCategoryLinkStmt: %w", cerr)
		}
	}
	if q.createItemsSubCategoryLinkStmt != nil {
		if cerr := q.createItemsSubCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemsSubCategoryLinkStmt: %w", cerr)
		}
	}
	if q.createItemsSubCategoryLinkBySubCategoryNameStmt != nil {
		if cerr := q.createItemsSubCategoryLinkBySubCategoryNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createItemsSubCategoryLinkBySubCategoryNameStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserBasketStmt != nil {
		if cerr := q.createUserBasketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserBasketStmt: %w", cerr)
		}
	}
	if q.createUserWishListStmt != nil {
		if cerr := q.createUserWishListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserWishListStmt: %w", cerr)
		}
	}
	if q.deleteAppSettingsStmt != nil {
		if cerr := q.deleteAppSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppSettingsStmt: %w", cerr)
		}
	}
	if q.deleteDiscountStmt != nil {
		if cerr := q.deleteDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDiscountStmt: %w", cerr)
		}
	}
	if q.deleteDiscountLinkStmt != nil {
		if cerr := q.deleteDiscountLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDiscountLinkStmt: %w", cerr)
		}
	}
	if q.deleteGroupPrivilegeStmt != nil {
		if cerr := q.deleteGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.deleteGroupPrivilegeLinkStmt != nil {
		if cerr := q.deleteGroupPrivilegeLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupPrivilegeLinkStmt: %w", cerr)
		}
	}
	if q.deleteGroupUserStmt != nil {
		if cerr := q.deleteGroupUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupUserStmt: %w", cerr)
		}
	}
	if q.deleteGroupUserLinkStmt != nil {
		if cerr := q.deleteGroupUserLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupUserLinkStmt: %w", cerr)
		}
	}
	if q.deleteItemStmt != nil {
		if cerr := q.deleteItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemStmt: %w", cerr)
		}
	}
	if q.deleteItemCategoryStmt != nil {
		if cerr := q.deleteItemCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemCategoryStmt: %w", cerr)
		}
	}
	if q.deleteItemReviewStmt != nil {
		if cerr := q.deleteItemReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemReviewStmt: %w", cerr)
		}
	}
	if q.deleteItemSubCategoryStmt != nil {
		if cerr := q.deleteItemSubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemSubCategoryStmt: %w", cerr)
		}
	}
	if q.deleteItemsCategoryLinkStmt != nil {
		if cerr := q.deleteItemsCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemsCategoryLinkStmt: %w", cerr)
		}
	}
	if q.deleteItemsSubCategoryLinkStmt != nil {
		if cerr := q.deleteItemsSubCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteItemsSubCategoryLinkStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserBasketByUserAndItemsStmt != nil {
		if cerr := q.deleteUserBasketByUserAndItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserBasketByUserAndItemsStmt: %w", cerr)
		}
	}
	if q.deleteUserWishListByUserAndItemsStmt != nil {
		if cerr := q.deleteUserWishListByUserAndItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserWishListByUserAndItemsStmt: %w", cerr)
		}
	}
	if q.getAppSettingsStmt != nil {
		if cerr := q.getAppSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppSettingsStmt: %w", cerr)
		}
	}
	if q.getAppSettingsByKeyStmt != nil {
		if cerr := q.getAppSettingsByKeyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppSettingsByKeyStmt: %w", cerr)
		}
	}
	if q.getDiscountStmt != nil {
		if cerr := q.getDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDiscountStmt: %w", cerr)
		}
	}
	if q.getDiscountByCodeStmt != nil {
		if cerr := q.getDiscountByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDiscountByCodeStmt: %w", cerr)
		}
	}
	if q.getDiscountLinkStmt != nil {
		if cerr := q.getDiscountLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDiscountLinkStmt: %w", cerr)
		}
	}
	if q.getGroupByNameStmt != nil {
		if cerr := q.getGroupByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupByNameStmt: %w", cerr)
		}
	}
	if q.getGroupPrivilegeStmt != nil {
		if cerr := q.getGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.getGroupPrivilegeLinkStmt != nil {
		if cerr := q.getGroupPrivilegeLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPrivilegeLinkStmt: %w", cerr)
		}
	}
	if q.getGroupPrivilegesByUserIdStmt != nil {
		if cerr := q.getGroupPrivilegesByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupPrivilegesByUserIdStmt: %w", cerr)
		}
	}
	if q.getGroupUserStmt != nil {
		if cerr := q.getGroupUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupUserStmt: %w", cerr)
		}
	}
	if q.getGroupUserLinkStmt != nil {
		if cerr := q.getGroupUserLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupUserLinkStmt: %w", cerr)
		}
	}
	if q.getGroupUserLinkByUserStmt != nil {
		if cerr := q.getGroupUserLinkByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupUserLinkByUserStmt: %w", cerr)
		}
	}
	if q.getItemStmt != nil {
		if cerr := q.getItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemStmt: %w", cerr)
		}
	}
	if q.getItemCategoryStmt != nil {
		if cerr := q.getItemCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemCategoryStmt: %w", cerr)
		}
	}
	if q.getItemCategoryLinkStmt != nil {
		if cerr := q.getItemCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemCategoryLinkStmt: %w", cerr)
		}
	}
	if q.getItemCategoryLinkBySubCategoryStmt != nil {
		if cerr := q.getItemCategoryLinkBySubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemCategoryLinkBySubCategoryStmt: %w", cerr)
		}
	}
	if q.getItemReviewStmt != nil {
		if cerr := q.getItemReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemReviewStmt: %w", cerr)
		}
	}
	if q.getItemSubCategoryStmt != nil {
		if cerr := q.getItemSubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemSubCategoryStmt: %w", cerr)
		}
	}
	if q.getItemSubCategoryAndCategoryLinkedStmt != nil {
		if cerr := q.getItemSubCategoryAndCategoryLinkedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemSubCategoryAndCategoryLinkedStmt: %w", cerr)
		}
	}
	if q.getItemsSubCategoryLinkStmt != nil {
		if cerr := q.getItemsSubCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemsSubCategoryLinkStmt: %w", cerr)
		}
	}
	if q.getItemsSubCategoryLinkByItemStmt != nil {
		if cerr := q.getItemsSubCategoryLinkByItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getItemsSubCategoryLinkByItemStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserBasketStmt != nil {
		if cerr := q.getUserBasketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserBasketStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserWishListStmt != nil {
		if cerr := q.getUserWishListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserWishListStmt: %w", cerr)
		}
	}
	if q.listActiveItemsStmt != nil {
		if cerr := q.listActiveItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveItemsStmt: %w", cerr)
		}
	}
	if q.listAppSettingsStmt != nil {
		if cerr := q.listAppSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAppSettingsStmt: %w", cerr)
		}
	}
	if q.listDiscountsStmt != nil {
		if cerr := q.listDiscountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDiscountsStmt: %w", cerr)
		}
	}
	if q.listDiscountsLinksStmt != nil {
		if cerr := q.listDiscountsLinksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDiscountsLinksStmt: %w", cerr)
		}
	}
	if q.listGroupPrivilegesLinkStmt != nil {
		if cerr := q.listGroupPrivilegesLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupPrivilegesLinkStmt: %w", cerr)
		}
	}
	if q.listGroupsPrivilegesStmt != nil {
		if cerr := q.listGroupsPrivilegesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsPrivilegesStmt: %w", cerr)
		}
	}
	if q.listGroupsUserByUserStmt != nil {
		if cerr := q.listGroupsUserByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsUserByUserStmt: %w", cerr)
		}
	}
	if q.listGroupsUsersStmt != nil {
		if cerr := q.listGroupsUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsUsersStmt: %w", cerr)
		}
	}
	if q.listGroupsUsersLinkStmt != nil {
		if cerr := q.listGroupsUsersLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listGroupsUsersLinkStmt: %w", cerr)
		}
	}
	if q.listItemSubCategoryAndCategoryLinkedStmt != nil {
		if cerr := q.listItemSubCategoryAndCategoryLinkedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemSubCategoryAndCategoryLinkedStmt: %w", cerr)
		}
	}
	if q.listItemsStmt != nil {
		if cerr := q.listItemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsStmt: %w", cerr)
		}
	}
	if q.listItemsCategoryStmt != nil {
		if cerr := q.listItemsCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsCategoryStmt: %w", cerr)
		}
	}
	if q.listItemsCategoryAndOccurenceStmt != nil {
		if cerr := q.listItemsCategoryAndOccurenceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsCategoryAndOccurenceStmt: %w", cerr)
		}
	}
	if q.listItemsCategoryLinkStmt != nil {
		if cerr := q.listItemsCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsCategoryLinkStmt: %w", cerr)
		}
	}
	if q.listItemsCategoryLinkByCategoryStmt != nil {
		if cerr := q.listItemsCategoryLinkByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsCategoryLinkByCategoryStmt: %w", cerr)
		}
	}
	if q.listItemsReviewsStmt != nil {
		if cerr := q.listItemsReviewsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsReviewsStmt: %w", cerr)
		}
	}
	if q.listItemsReviewsByItemIdStmt != nil {
		if cerr := q.listItemsReviewsByItemIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsReviewsByItemIdStmt: %w", cerr)
		}
	}
	if q.listItemsReviewsByUserIdStmt != nil {
		if cerr := q.listItemsReviewsByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsReviewsByUserIdStmt: %w", cerr)
		}
	}
	if q.listItemsSubCategoryStmt != nil {
		if cerr := q.listItemsSubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsSubCategoryStmt: %w", cerr)
		}
	}
	if q.listItemsSubCategoryLinkStmt != nil {
		if cerr := q.listItemsSubCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsSubCategoryLinkStmt: %w", cerr)
		}
	}
	if q.listItemsSubCategoryLinkByCategoryStmt != nil {
		if cerr := q.listItemsSubCategoryLinkByCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listItemsSubCategoryLinkByCategoryStmt: %w", cerr)
		}
	}
	if q.listUserBasketByUserStmt != nil {
		if cerr := q.listUserBasketByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserBasketByUserStmt: %w", cerr)
		}
	}
	if q.listUserWishListByUserStmt != nil {
		if cerr := q.listUserWishListByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUserWishListByUserStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateAppSettingsStmt != nil {
		if cerr := q.updateAppSettingsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAppSettingsStmt: %w", cerr)
		}
	}
	if q.updateDiscountStmt != nil {
		if cerr := q.updateDiscountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDiscountStmt: %w", cerr)
		}
	}
	if q.updateDiscountLinkStmt != nil {
		if cerr := q.updateDiscountLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDiscountLinkStmt: %w", cerr)
		}
	}
	if q.updateGroupPrivilegeStmt != nil {
		if cerr := q.updateGroupPrivilegeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupPrivilegeStmt: %w", cerr)
		}
	}
	if q.updateGroupPrivilegeLinkStmt != nil {
		if cerr := q.updateGroupPrivilegeLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupPrivilegeLinkStmt: %w", cerr)
		}
	}
	if q.updateGroupUserStmt != nil {
		if cerr := q.updateGroupUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupUserStmt: %w", cerr)
		}
	}
	if q.updateGroupUserLinkStmt != nil {
		if cerr := q.updateGroupUserLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateGroupUserLinkStmt: %w", cerr)
		}
	}
	if q.updateItemStmt != nil {
		if cerr := q.updateItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemStmt: %w", cerr)
		}
	}
	if q.updateItemCategoryStmt != nil {
		if cerr := q.updateItemCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemCategoryStmt: %w", cerr)
		}
	}
	if q.updateItemSubCategoryStmt != nil {
		if cerr := q.updateItemSubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemSubCategoryStmt: %w", cerr)
		}
	}
	if q.updateItemsCategoryLinkStmt != nil {
		if cerr := q.updateItemsCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemsCategoryLinkStmt: %w", cerr)
		}
	}
	if q.updateItemsCategoryLinkBySubCategoryStmt != nil {
		if cerr := q.updateItemsCategoryLinkBySubCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemsCategoryLinkBySubCategoryStmt: %w", cerr)
		}
	}
	if q.updateItemsSubCategoryLinkStmt != nil {
		if cerr := q.updateItemsSubCategoryLinkStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemsSubCategoryLinkStmt: %w", cerr)
		}
	}
	if q.updateItemsSubCategoryLinkByItemStmt != nil {
		if cerr := q.updateItemsSubCategoryLinkByItemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateItemsSubCategoryLinkByItemStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                              DBTX
	tx                                              *sql.Tx
	createAppSettingsStmt                           *sql.Stmt
	createDiscountStmt                              *sql.Stmt
	createDiscountLinkStmt                          *sql.Stmt
	createGroupPrivilegeStmt                        *sql.Stmt
	createGroupPrivilegeLinkStmt                    *sql.Stmt
	createGroupUserStmt                             *sql.Stmt
	createGroupUserLinkStmt                         *sql.Stmt
	createGroupUserLinkByGroupNameStmt              *sql.Stmt
	createItemStmt                                  *sql.Stmt
	createItemCategoryStmt                          *sql.Stmt
	createItemReviewStmt                            *sql.Stmt
	createItemSubCategoryStmt                       *sql.Stmt
	createItemsCategoryLinkStmt                     *sql.Stmt
	createItemsSubCategoryLinkStmt                  *sql.Stmt
	createItemsSubCategoryLinkBySubCategoryNameStmt *sql.Stmt
	createUserStmt                                  *sql.Stmt
	createUserBasketStmt                            *sql.Stmt
	createUserWishListStmt                          *sql.Stmt
	deleteAppSettingsStmt                           *sql.Stmt
	deleteDiscountStmt                              *sql.Stmt
	deleteDiscountLinkStmt                          *sql.Stmt
	deleteGroupPrivilegeStmt                        *sql.Stmt
	deleteGroupPrivilegeLinkStmt                    *sql.Stmt
	deleteGroupUserStmt                             *sql.Stmt
	deleteGroupUserLinkStmt                         *sql.Stmt
	deleteItemStmt                                  *sql.Stmt
	deleteItemCategoryStmt                          *sql.Stmt
	deleteItemReviewStmt                            *sql.Stmt
	deleteItemSubCategoryStmt                       *sql.Stmt
	deleteItemsCategoryLinkStmt                     *sql.Stmt
	deleteItemsSubCategoryLinkStmt                  *sql.Stmt
	deleteUserStmt                                  *sql.Stmt
	deleteUserBasketByUserAndItemsStmt              *sql.Stmt
	deleteUserWishListByUserAndItemsStmt            *sql.Stmt
	getAppSettingsStmt                              *sql.Stmt
	getAppSettingsByKeyStmt                         *sql.Stmt
	getDiscountStmt                                 *sql.Stmt
	getDiscountByCodeStmt                           *sql.Stmt
	getDiscountLinkStmt                             *sql.Stmt
	getGroupByNameStmt                              *sql.Stmt
	getGroupPrivilegeStmt                           *sql.Stmt
	getGroupPrivilegeLinkStmt                       *sql.Stmt
	getGroupPrivilegesByUserIdStmt                  *sql.Stmt
	getGroupUserStmt                                *sql.Stmt
	getGroupUserLinkStmt                            *sql.Stmt
	getGroupUserLinkByUserStmt                      *sql.Stmt
	getItemStmt                                     *sql.Stmt
	getItemCategoryStmt                             *sql.Stmt
	getItemCategoryLinkStmt                         *sql.Stmt
	getItemCategoryLinkBySubCategoryStmt            *sql.Stmt
	getItemReviewStmt                               *sql.Stmt
	getItemSubCategoryStmt                          *sql.Stmt
	getItemSubCategoryAndCategoryLinkedStmt         *sql.Stmt
	getItemsSubCategoryLinkStmt                     *sql.Stmt
	getItemsSubCategoryLinkByItemStmt               *sql.Stmt
	getUserStmt                                     *sql.Stmt
	getUserBasketStmt                               *sql.Stmt
	getUserByEmailStmt                              *sql.Stmt
	getUserWishListStmt                             *sql.Stmt
	listActiveItemsStmt                             *sql.Stmt
	listAppSettingsStmt                             *sql.Stmt
	listDiscountsStmt                               *sql.Stmt
	listDiscountsLinksStmt                          *sql.Stmt
	listGroupPrivilegesLinkStmt                     *sql.Stmt
	listGroupsPrivilegesStmt                        *sql.Stmt
	listGroupsUserByUserStmt                        *sql.Stmt
	listGroupsUsersStmt                             *sql.Stmt
	listGroupsUsersLinkStmt                         *sql.Stmt
	listItemSubCategoryAndCategoryLinkedStmt        *sql.Stmt
	listItemsStmt                                   *sql.Stmt
	listItemsCategoryStmt                           *sql.Stmt
	listItemsCategoryAndOccurenceStmt               *sql.Stmt
	listItemsCategoryLinkStmt                       *sql.Stmt
	listItemsCategoryLinkByCategoryStmt             *sql.Stmt
	listItemsReviewsStmt                            *sql.Stmt
	listItemsReviewsByItemIdStmt                    *sql.Stmt
	listItemsReviewsByUserIdStmt                    *sql.Stmt
	listItemsSubCategoryStmt                        *sql.Stmt
	listItemsSubCategoryLinkStmt                    *sql.Stmt
	listItemsSubCategoryLinkByCategoryStmt          *sql.Stmt
	listUserBasketByUserStmt                        *sql.Stmt
	listUserWishListByUserStmt                      *sql.Stmt
	listUsersStmt                                   *sql.Stmt
	updateAppSettingsStmt                           *sql.Stmt
	updateDiscountStmt                              *sql.Stmt
	updateDiscountLinkStmt                          *sql.Stmt
	updateGroupPrivilegeStmt                        *sql.Stmt
	updateGroupPrivilegeLinkStmt                    *sql.Stmt
	updateGroupUserStmt                             *sql.Stmt
	updateGroupUserLinkStmt                         *sql.Stmt
	updateItemStmt                                  *sql.Stmt
	updateItemCategoryStmt                          *sql.Stmt
	updateItemSubCategoryStmt                       *sql.Stmt
	updateItemsCategoryLinkStmt                     *sql.Stmt
	updateItemsCategoryLinkBySubCategoryStmt        *sql.Stmt
	updateItemsSubCategoryLinkStmt                  *sql.Stmt
	updateItemsSubCategoryLinkByItemStmt            *sql.Stmt
	updateUserStmt                                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                 tx,
		tx:                                 tx,
		createAppSettingsStmt:              q.createAppSettingsStmt,
		createDiscountStmt:                 q.createDiscountStmt,
		createDiscountLinkStmt:             q.createDiscountLinkStmt,
		createGroupPrivilegeStmt:           q.createGroupPrivilegeStmt,
		createGroupPrivilegeLinkStmt:       q.createGroupPrivilegeLinkStmt,
		createGroupUserStmt:                q.createGroupUserStmt,
		createGroupUserLinkStmt:            q.createGroupUserLinkStmt,
		createGroupUserLinkByGroupNameStmt: q.createGroupUserLinkByGroupNameStmt,
		createItemStmt:                     q.createItemStmt,
		createItemCategoryStmt:             q.createItemCategoryStmt,
		createItemReviewStmt:               q.createItemReviewStmt,
		createItemSubCategoryStmt:          q.createItemSubCategoryStmt,
		createItemsCategoryLinkStmt:        q.createItemsCategoryLinkStmt,
		createItemsSubCategoryLinkStmt:     q.createItemsSubCategoryLinkStmt,
		createItemsSubCategoryLinkBySubCategoryNameStmt: q.createItemsSubCategoryLinkBySubCategoryNameStmt,
		createUserStmt:                           q.createUserStmt,
		createUserBasketStmt:                     q.createUserBasketStmt,
		createUserWishListStmt:                   q.createUserWishListStmt,
		deleteAppSettingsStmt:                    q.deleteAppSettingsStmt,
		deleteDiscountStmt:                       q.deleteDiscountStmt,
		deleteDiscountLinkStmt:                   q.deleteDiscountLinkStmt,
		deleteGroupPrivilegeStmt:                 q.deleteGroupPrivilegeStmt,
		deleteGroupPrivilegeLinkStmt:             q.deleteGroupPrivilegeLinkStmt,
		deleteGroupUserStmt:                      q.deleteGroupUserStmt,
		deleteGroupUserLinkStmt:                  q.deleteGroupUserLinkStmt,
		deleteItemStmt:                           q.deleteItemStmt,
		deleteItemCategoryStmt:                   q.deleteItemCategoryStmt,
		deleteItemReviewStmt:                     q.deleteItemReviewStmt,
		deleteItemSubCategoryStmt:                q.deleteItemSubCategoryStmt,
		deleteItemsCategoryLinkStmt:              q.deleteItemsCategoryLinkStmt,
		deleteItemsSubCategoryLinkStmt:           q.deleteItemsSubCategoryLinkStmt,
		deleteUserStmt:                           q.deleteUserStmt,
		deleteUserBasketByUserAndItemsStmt:       q.deleteUserBasketByUserAndItemsStmt,
		deleteUserWishListByUserAndItemsStmt:     q.deleteUserWishListByUserAndItemsStmt,
		getAppSettingsStmt:                       q.getAppSettingsStmt,
		getAppSettingsByKeyStmt:                  q.getAppSettingsByKeyStmt,
		getDiscountStmt:                          q.getDiscountStmt,
		getDiscountByCodeStmt:                    q.getDiscountByCodeStmt,
		getDiscountLinkStmt:                      q.getDiscountLinkStmt,
		getGroupByNameStmt:                       q.getGroupByNameStmt,
		getGroupPrivilegeStmt:                    q.getGroupPrivilegeStmt,
		getGroupPrivilegeLinkStmt:                q.getGroupPrivilegeLinkStmt,
		getGroupPrivilegesByUserIdStmt:           q.getGroupPrivilegesByUserIdStmt,
		getGroupUserStmt:                         q.getGroupUserStmt,
		getGroupUserLinkStmt:                     q.getGroupUserLinkStmt,
		getGroupUserLinkByUserStmt:               q.getGroupUserLinkByUserStmt,
		getItemStmt:                              q.getItemStmt,
		getItemCategoryStmt:                      q.getItemCategoryStmt,
		getItemCategoryLinkStmt:                  q.getItemCategoryLinkStmt,
		getItemCategoryLinkBySubCategoryStmt:     q.getItemCategoryLinkBySubCategoryStmt,
		getItemReviewStmt:                        q.getItemReviewStmt,
		getItemSubCategoryStmt:                   q.getItemSubCategoryStmt,
		getItemSubCategoryAndCategoryLinkedStmt:  q.getItemSubCategoryAndCategoryLinkedStmt,
		getItemsSubCategoryLinkStmt:              q.getItemsSubCategoryLinkStmt,
		getItemsSubCategoryLinkByItemStmt:        q.getItemsSubCategoryLinkByItemStmt,
		getUserStmt:                              q.getUserStmt,
		getUserBasketStmt:                        q.getUserBasketStmt,
		getUserByEmailStmt:                       q.getUserByEmailStmt,
		getUserWishListStmt:                      q.getUserWishListStmt,
		listActiveItemsStmt:                      q.listActiveItemsStmt,
		listAppSettingsStmt:                      q.listAppSettingsStmt,
		listDiscountsStmt:                        q.listDiscountsStmt,
		listDiscountsLinksStmt:                   q.listDiscountsLinksStmt,
		listGroupPrivilegesLinkStmt:              q.listGroupPrivilegesLinkStmt,
		listGroupsPrivilegesStmt:                 q.listGroupsPrivilegesStmt,
		listGroupsUserByUserStmt:                 q.listGroupsUserByUserStmt,
		listGroupsUsersStmt:                      q.listGroupsUsersStmt,
		listGroupsUsersLinkStmt:                  q.listGroupsUsersLinkStmt,
		listItemSubCategoryAndCategoryLinkedStmt: q.listItemSubCategoryAndCategoryLinkedStmt,
		listItemsStmt:                            q.listItemsStmt,
		listItemsCategoryStmt:                    q.listItemsCategoryStmt,
		listItemsCategoryAndOccurenceStmt:        q.listItemsCategoryAndOccurenceStmt,
		listItemsCategoryLinkStmt:                q.listItemsCategoryLinkStmt,
		listItemsCategoryLinkByCategoryStmt:      q.listItemsCategoryLinkByCategoryStmt,
		listItemsReviewsStmt:                     q.listItemsReviewsStmt,
		listItemsReviewsByItemIdStmt:             q.listItemsReviewsByItemIdStmt,
		listItemsReviewsByUserIdStmt:             q.listItemsReviewsByUserIdStmt,
		listItemsSubCategoryStmt:                 q.listItemsSubCategoryStmt,
		listItemsSubCategoryLinkStmt:             q.listItemsSubCategoryLinkStmt,
		listItemsSubCategoryLinkByCategoryStmt:   q.listItemsSubCategoryLinkByCategoryStmt,
		listUserBasketByUserStmt:                 q.listUserBasketByUserStmt,
		listUserWishListByUserStmt:               q.listUserWishListByUserStmt,
		listUsersStmt:                            q.listUsersStmt,
		updateAppSettingsStmt:                    q.updateAppSettingsStmt,
		updateDiscountStmt:                       q.updateDiscountStmt,
		updateDiscountLinkStmt:                   q.updateDiscountLinkStmt,
		updateGroupPrivilegeStmt:                 q.updateGroupPrivilegeStmt,
		updateGroupPrivilegeLinkStmt:             q.updateGroupPrivilegeLinkStmt,
		updateGroupUserStmt:                      q.updateGroupUserStmt,
		updateGroupUserLinkStmt:                  q.updateGroupUserLinkStmt,
		updateItemStmt:                           q.updateItemStmt,
		updateItemCategoryStmt:                   q.updateItemCategoryStmt,
		updateItemSubCategoryStmt:                q.updateItemSubCategoryStmt,
		updateItemsCategoryLinkStmt:              q.updateItemsCategoryLinkStmt,
		updateItemsCategoryLinkBySubCategoryStmt: q.updateItemsCategoryLinkBySubCategoryStmt,
		updateItemsSubCategoryLinkStmt:           q.updateItemsSubCategoryLinkStmt,
		updateItemsSubCategoryLinkByItemStmt:     q.updateItemsSubCategoryLinkByItemStmt,
		updateUserStmt:                           q.updateUserStmt,
	}
}
