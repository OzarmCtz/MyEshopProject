// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const createAppSettings = `-- name: CreateAppSettings :execresult
INSERT INTO app_settings (as_key, as_value ,as_description, as_last_updated  
) VALUES (?, ?, ?, ?)
`

type CreateAppSettingsParams struct {
	AsKey         string         `json:"as_key"`
	AsValue       string         `json:"as_value"`
	AsDescription NullString `json:"as_description"`
	AsLastUpdated time.Time      `json:"as_last_updated"`
}

func (q *Queries) CreateAppSettings(ctx context.Context, arg CreateAppSettingsParams) (sql.Result, error) {
	return q.exec(ctx, q.createAppSettingsStmt, createAppSettings,
		arg.AsKey,
		arg.AsValue,
		arg.AsDescription,
		arg.AsLastUpdated,
	)
}

const createDiscount = `-- name: CreateDiscount :execresult
INSERT INTO discount (d_code ,d_description, d_start_time  , d_end_time , d_zone_time , d_is_disabled , d_price_type , d_value ) 
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateDiscountParams struct {
	DCode        string         `json:"d_code"`
	DDescription NullString `json:"d_description"`
	DStartTime   NullTime   `json:"d_start_time"`
	DEndTime     NullTime   `json:"d_end_time"`
	DZoneTime    NullString `json:"d_zone_time"`
	DIsDisabled  bool           `json:"d_is_disabled"`
	DPriceType   string         `json:"d_price_type"`
	DValue       int32          `json:"d_value"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (sql.Result, error) {
	return q.exec(ctx, q.createDiscountStmt, createDiscount,
		arg.DCode,
		arg.DDescription,
		arg.DStartTime,
		arg.DEndTime,
		arg.DZoneTime,
		arg.DIsDisabled,
		arg.DPriceType,
		arg.DValue,
	)
}

const createDiscountLink = `-- name: CreateDiscountLink :execresult
INSERT INTO discount_link (dl_discount_id ,dl_items_id, dl_items_sub_category  , dl_items_category) 
VALUES (?, ?, ?, ?)
`

type CreateDiscountLinkParams struct {
	DlDiscountID       int32         `json:"dl_discount_id"`
	DlItemsID          NullInt32 `json:"dl_items_id"`
	DlItemsSubCategory NullInt32 `json:"dl_items_sub_category"`
	DlItemsCategory    NullInt32 `json:"dl_items_category"`
}

func (q *Queries) CreateDiscountLink(ctx context.Context, arg CreateDiscountLinkParams) (sql.Result, error) {
	return q.exec(ctx, q.createDiscountLinkStmt, createDiscountLink,
		arg.DlDiscountID,
		arg.DlItemsID,
		arg.DlItemsSubCategory,
		arg.DlItemsCategory,
	)
}

const createGroupPrivilege = `-- name: CreateGroupPrivilege :execresult
INSERT INTO ` + "`" + `groups_privileges` + "`" + ` (gp_path
) VALUES (?)
`

func (q *Queries) CreateGroupPrivilege(ctx context.Context, gpPath NullString) (sql.Result, error) {
	return q.exec(ctx, q.createGroupPrivilegeStmt, createGroupPrivilege, gpPath)
}

const createGroupPrivilegeLink = `-- name: CreateGroupPrivilegeLink :execresult
INSERT INTO ` + "`" + `groups_privileges_link` + "`" + ` (gpl_groups_users_id , gpl_groups_privileges_id
) VALUES ( 
  ? , ?
)
`

type CreateGroupPrivilegeLinkParams struct {
	GplGroupsUsersID      int32 `json:"gpl_groups_users_id"`
	GplGroupsPrivilegesID int32 `json:"gpl_groups_privileges_id"`
}

func (q *Queries) CreateGroupPrivilegeLink(ctx context.Context, arg CreateGroupPrivilegeLinkParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupPrivilegeLinkStmt, createGroupPrivilegeLink, arg.GplGroupsUsersID, arg.GplGroupsPrivilegesID)
}

const createGroupUser = `-- name: CreateGroupUser :execresult
INSERT INTO ` + "`" + `groups_users` + "`" + ` (gu_name, gu_description
) VALUES (?, ?)
`

type CreateGroupUserParams struct {
	GuName        string         `json:"gu_name"`
	GuDescription NullString `json:"gu_description"`
}

func (q *Queries) CreateGroupUser(ctx context.Context, arg CreateGroupUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupUserStmt, createGroupUser, arg.GuName, arg.GuDescription)
}

const createGroupUserLink = `-- name: CreateGroupUserLink :execresult
INSERT INTO ` + "`" + `groups_users_link` + "`" + ` (gul_user_id , gul_group_id
) VALUES (? , ?)
`

type CreateGroupUserLinkParams struct {
	GulUserID  int32 `json:"gul_user_id"`
	GulGroupID int32 `json:"gul_group_id"`
}

func (q *Queries) CreateGroupUserLink(ctx context.Context, arg CreateGroupUserLinkParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupUserLinkStmt, createGroupUserLink, arg.GulUserID, arg.GulGroupID)
}

const createGroupUserLinkByGroupName = `-- name: CreateGroupUserLinkByGroupName :execresult
INSERT INTO ` + "`" + `groups_users_link` + "`" + ` (gul_user_id, gul_group_id)
SELECT ?, gu.gu_id FROM ` + "`" + `groups_users` + "`" + ` gu
WHERE gu.gu_name = ?
`

type CreateGroupUserLinkByGroupNameParams struct {
	GulUserID int32  `json:"gul_user_id"`
	GuName    string `json:"gu_name"`
}

func (q *Queries) CreateGroupUserLinkByGroupName(ctx context.Context, arg CreateGroupUserLinkByGroupNameParams) (sql.Result, error) {
	return q.exec(ctx, q.createGroupUserLinkByGroupNameStmt, createGroupUserLinkByGroupName, arg.GulUserID, arg.GuName)
}

const createItem = `-- name: CreateItem :execresult
INSERT INTO items (i_title, i_description ,i_price, i_quantity ,  i_picture_url , i_file_path , i_is_disabled , i_release_date
) VALUES (?, ? , ?, ?, ?, ?, ?, ?)
`

type CreateItemParams struct {
	ITitle       string         `json:"i_title"`
	IDescription NullString `json:"i_description"`
	IPrice       string         `json:"i_price"`
	IQuantity    NullInt32  `json:"i_quantity"`
	IPictureUrl  NullString `json:"i_picture_url"`
	IFilePath    NullString `json:"i_file_path"`
	IIsDisabled  bool           `json:"i_is_disabled"`
	IReleaseDate time.Time      `json:"i_release_date"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemStmt, createItem,
		arg.ITitle,
		arg.IDescription,
		arg.IPrice,
		arg.IQuantity,
		arg.IPictureUrl,
		arg.IFilePath,
		arg.IIsDisabled,
		arg.IReleaseDate,
	)
}

const createItemCategory = `-- name: CreateItemCategory :execresult
INSERT INTO items_category (ic_name, ic_description , ic_picture_url
) VALUES (?, ? ,?)
`

type CreateItemCategoryParams struct {
	IcName        string         `json:"ic_name"`
	IcDescription NullString `json:"ic_description"`
	IcPictureUrl  NullString `json:"ic_picture_url"`
}

func (q *Queries) CreateItemCategory(ctx context.Context, arg CreateItemCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemCategoryStmt, createItemCategory, arg.IcName, arg.IcDescription, arg.IcPictureUrl)
}

const createItemReview = `-- name: CreateItemReview :execresult
INSERT INTO items_reviews (ir_user_id, ir_items_id ,ir_comments, ir_stars
) VALUES (?, ?, ?, ?)
`

type CreateItemReviewParams struct {
	IrUserID   int32  `json:"ir_user_id"`
	IrItemsID  int32  `json:"ir_items_id"`
	IrComments string `json:"ir_comments"`
	IrStars    int32  `json:"ir_stars"`
}

func (q *Queries) CreateItemReview(ctx context.Context, arg CreateItemReviewParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemReviewStmt, createItemReview,
		arg.IrUserID,
		arg.IrItemsID,
		arg.IrComments,
		arg.IrStars,
	)
}

const createItemSubCategory = `-- name: CreateItemSubCategory :execresult
INSERT INTO items_sub_category (isc_name, 
isc_description , isc_picture_url) VALUES (?, ? , ?)
`

type CreateItemSubCategoryParams struct {
	IscName        string         `json:"isc_name"`
	IscDescription NullString `json:"isc_description"`
	IscPictureUrl  NullString `json:"isc_picture_url"`
}

func (q *Queries) CreateItemSubCategory(ctx context.Context, arg CreateItemSubCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemSubCategoryStmt, createItemSubCategory, arg.IscName, arg.IscDescription, arg.IscPictureUrl)
}

const createItemsCategoryLink = `-- name: CreateItemsCategoryLink :execresult
INSERT INTO ` + "`" + `items_category_link` + "`" + ` (icl_items_sub_category_id , icl_items_category_id
) VALUES (? , ?)
`

type CreateItemsCategoryLinkParams struct {
	IclItemsSubCategoryID int32 `json:"icl_items_sub_category_id"`
	IclItemsCategoryID    int32 `json:"icl_items_category_id"`
}

func (q *Queries) CreateItemsCategoryLink(ctx context.Context, arg CreateItemsCategoryLinkParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemsCategoryLinkStmt, createItemsCategoryLink, arg.IclItemsSubCategoryID, arg.IclItemsCategoryID)
}

const createItemsSubCategoryLink = `-- name: CreateItemsSubCategoryLink :execresult
INSERT INTO ` + "`" + `items_sub_category_link` + "`" + ` (iscl_items_id , iscl_sub_category_id
) VALUES (? , ?)
`

type CreateItemsSubCategoryLinkParams struct {
	IsclItemsID       int32 `json:"iscl_items_id"`
	IsclSubCategoryID int32 `json:"iscl_sub_category_id"`
}

func (q *Queries) CreateItemsSubCategoryLink(ctx context.Context, arg CreateItemsSubCategoryLinkParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemsSubCategoryLinkStmt, createItemsSubCategoryLink, arg.IsclItemsID, arg.IsclSubCategoryID)
}

const createItemsSubCategoryLinkBySubCategoryName = `-- name: CreateItemsSubCategoryLinkBySubCategoryName :execresult
INSERT INTO ` + "`" + `items_sub_category_link` + "`" + ` (iscl_items_id, iscl_sub_category_id)
SELECT ?, isc.isc_id FROM ` + "`" + `items_sub_category` + "`" + ` isc
WHERE isc.isc_name = ?
`

type CreateItemsSubCategoryLinkBySubCategoryNameParams struct {
	IsclItemsID int32  `json:"iscl_items_id"`
	IscName     string `json:"isc_name"`
}

func (q *Queries) CreateItemsSubCategoryLinkBySubCategoryName(ctx context.Context, arg CreateItemsSubCategoryLinkBySubCategoryNameParams) (sql.Result, error) {
	return q.exec(ctx, q.createItemsSubCategoryLinkBySubCategoryNameStmt, createItemsSubCategoryLinkBySubCategoryName, arg.IsclItemsID, arg.IscName)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (u_email, u_uid ,u_register_date, u_is_disabled 
) VALUES (?, ? , ?, ?)
`

type CreateUserParams struct {
	UEmail        string    `json:"u_email"`
	UUid          string    `json:"u_uid"`
	URegisterDate time.Time `json:"u_register_date"`
	UIsDisabled   bool      `json:"u_is_disabled"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser,
		arg.UEmail,
		arg.UUid,
		arg.URegisterDate,
		arg.UIsDisabled,
	)
}

const createUserBasket = `-- name: CreateUserBasket :execresult
INSERT INTO users_basket (ub_user_id, ub_items_id ,ub_time_added , ub_quantity
) VALUES (?, ?, ? , ?)
`

type CreateUserBasketParams struct {
	UbUserID    int32     `json:"ub_user_id"`
	UbItemsID   int32     `json:"ub_items_id"`
	UbTimeAdded time.Time `json:"ub_time_added"`
	UbQuantity  int32     `json:"ub_quantity"`
}

func (q *Queries) CreateUserBasket(ctx context.Context, arg CreateUserBasketParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserBasketStmt, createUserBasket,
		arg.UbUserID,
		arg.UbItemsID,
		arg.UbTimeAdded,
		arg.UbQuantity,
	)
}

const createUserWishList = `-- name: CreateUserWishList :execresult
INSERT INTO users_wishlist (wl_user_id, wl_items_id ,wl_times_added 
) VALUES (?, ?, ?)
`

type CreateUserWishListParams struct {
	WlUserID     int32         `json:"wl_user_id"`
	WlItemsID    NullInt32 `json:"wl_items_id"`
	WlTimesAdded time.Time     `json:"wl_times_added"`
}

func (q *Queries) CreateUserWishList(ctx context.Context, arg CreateUserWishListParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserWishListStmt, createUserWishList, arg.WlUserID, arg.WlItemsID, arg.WlTimesAdded)
}

const deleteAppSettings = `-- name: DeleteAppSettings :execrows
DELETE FROM app_settings
WHERE as_id = ?
`

func (q *Queries) DeleteAppSettings(ctx context.Context, asID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteAppSettingsStmt, deleteAppSettings, asID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteDiscount = `-- name: DeleteDiscount :execrows
DELETE FROM discount
WHERE d_id = ?
`

func (q *Queries) DeleteDiscount(ctx context.Context, dID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteDiscountStmt, deleteDiscount, dID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteDiscountLink = `-- name: DeleteDiscountLink :execrows
DELETE FROM discount_link
WHERE dl_id = ?
`

func (q *Queries) DeleteDiscountLink(ctx context.Context, dlID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteDiscountLinkStmt, deleteDiscountLink, dlID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteGroupPrivilege = `-- name: DeleteGroupPrivilege :execrows
DELETE FROM ` + "`" + `groups_privileges` + "`" + `
WHERE gp_id = ?
`

func (q *Queries) DeleteGroupPrivilege(ctx context.Context, gpID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteGroupPrivilegeStmt, deleteGroupPrivilege, gpID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteGroupPrivilegeLink = `-- name: DeleteGroupPrivilegeLink :execrows
DELETE FROM ` + "`" + `groups_privileges_link` + "`" + `
WHERE gpl_id = ?
`

func (q *Queries) DeleteGroupPrivilegeLink(ctx context.Context, gplID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteGroupPrivilegeLinkStmt, deleteGroupPrivilegeLink, gplID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteGroupUser = `-- name: DeleteGroupUser :execrows
DELETE FROM ` + "`" + `groups_users` + "`" + `
WHERE gu_id = ?
`

func (q *Queries) DeleteGroupUser(ctx context.Context, guID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteGroupUserStmt, deleteGroupUser, guID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteGroupUserLink = `-- name: DeleteGroupUserLink :execrows
DELETE FROM ` + "`" + `groups_users_link` + "`" + `
WHERE gul_id = ?
`

func (q *Queries) DeleteGroupUserLink(ctx context.Context, gulID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteGroupUserLinkStmt, deleteGroupUserLink, gulID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteItem = `-- name: DeleteItem :execrows
DELETE FROM items
WHERE i_id = ?
`

func (q *Queries) DeleteItem(ctx context.Context, iID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteItemStmt, deleteItem, iID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteItemCategory = `-- name: DeleteItemCategory :execrows
DELETE FROM items_category
WHERE ic_id = ?
`

func (q *Queries) DeleteItemCategory(ctx context.Context, icID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteItemCategoryStmt, deleteItemCategory, icID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteItemReview = `-- name: DeleteItemReview :execrows
DELETE FROM items_reviews
WHERE ir_id = ?
`

func (q *Queries) DeleteItemReview(ctx context.Context, irID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteItemReviewStmt, deleteItemReview, irID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteItemSubCategory = `-- name: DeleteItemSubCategory :execrows
DELETE FROM items_sub_category
WHERE isc_id = ?
`

func (q *Queries) DeleteItemSubCategory(ctx context.Context, iscID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteItemSubCategoryStmt, deleteItemSubCategory, iscID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteItemsCategoryLink = `-- name: DeleteItemsCategoryLink :execrows
DELETE FROM ` + "`" + `items_category_link` + "`" + `
WHERE icl_id = ?
`

func (q *Queries) DeleteItemsCategoryLink(ctx context.Context, iclID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteItemsCategoryLinkStmt, deleteItemsCategoryLink, iclID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteItemsSubCategoryLink = `-- name: DeleteItemsSubCategoryLink :execrows
DELETE FROM ` + "`" + `items_sub_category_link` + "`" + `
WHERE iscl_id = ?
`

func (q *Queries) DeleteItemsSubCategoryLink(ctx context.Context, isclID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteItemsSubCategoryLinkStmt, deleteItemsSubCategoryLink, isclID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUser = `-- name: DeleteUser :execrows
DELETE FROM users
WHERE u_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, uID int32) (int64, error) {
	result, err := q.exec(ctx, q.deleteUserStmt, deleteUser, uID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUserBasketByUserAndItems = `-- name: DeleteUserBasketByUserAndItems :execrows
DELETE FROM users_basket
WHERE ub_user_id = ? AND ub_items_id = ?
`

type DeleteUserBasketByUserAndItemsParams struct {
	UbUserID  int32 `json:"ub_user_id"`
	UbItemsID int32 `json:"ub_items_id"`
}

func (q *Queries) DeleteUserBasketByUserAndItems(ctx context.Context, arg DeleteUserBasketByUserAndItemsParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteUserBasketByUserAndItemsStmt, deleteUserBasketByUserAndItems, arg.UbUserID, arg.UbItemsID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteUserWishListByUserAndItems = `-- name: DeleteUserWishListByUserAndItems :execrows
DELETE FROM users_wishlist
WHERE wl_user_id = ? AND wl_items_id = ?
`

type DeleteUserWishListByUserAndItemsParams struct {
	WlUserID  int32         `json:"wl_user_id"`
	WlItemsID NullInt32 `json:"wl_items_id"`
}

func (q *Queries) DeleteUserWishListByUserAndItems(ctx context.Context, arg DeleteUserWishListByUserAndItemsParams) (int64, error) {
	result, err := q.exec(ctx, q.deleteUserWishListByUserAndItemsStmt, deleteUserWishListByUserAndItems, arg.WlUserID, arg.WlItemsID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAppSettings = `-- name: GetAppSettings :one
SELECT as_id, as_key, as_value, as_description, as_last_updated FROM app_settings
WHERE as_id = ? LIMIT 1
`

func (q *Queries) GetAppSettings(ctx context.Context, asID int32) (AppSetting, error) {
	row := q.queryRow(ctx, q.getAppSettingsStmt, getAppSettings, asID)
	var i AppSetting
	err := row.Scan(
		&i.AsID,
		&i.AsKey,
		&i.AsValue,
		&i.AsDescription,
		&i.AsLastUpdated,
	)
	return i, err
}

const getAppSettingsByKey = `-- name: GetAppSettingsByKey :one
SELECT as_id, as_key, as_value, as_description, as_last_updated FROM app_settings
WHERE as_key = ?  LIMIT 1
`

func (q *Queries) GetAppSettingsByKey(ctx context.Context, asKey string) (AppSetting, error) {
	row := q.queryRow(ctx, q.getAppSettingsByKeyStmt, getAppSettingsByKey, asKey)
	var i AppSetting
	err := row.Scan(
		&i.AsID,
		&i.AsKey,
		&i.AsValue,
		&i.AsDescription,
		&i.AsLastUpdated,
	)
	return i, err
}

const getDiscount = `-- name: GetDiscount :one
SELECT d_id, d_code, d_description, d_start_time, d_end_time, d_zone_time, d_is_disabled, d_price_type, d_value FROM discount
WHERE d_id = ? LIMIT 1
`

func (q *Queries) GetDiscount(ctx context.Context, dID int32) (Discount, error) {
	row := q.queryRow(ctx, q.getDiscountStmt, getDiscount, dID)
	var i Discount
	err := row.Scan(
		&i.DID,
		&i.DCode,
		&i.DDescription,
		&i.DStartTime,
		&i.DEndTime,
		&i.DZoneTime,
		&i.DIsDisabled,
		&i.DPriceType,
		&i.DValue,
	)
	return i, err
}

const getDiscountByCode = `-- name: GetDiscountByCode :one
SELECT d_id, d_code, d_description, d_start_time, d_end_time, d_zone_time, d_is_disabled, d_price_type, d_value FROM discount
WHERE d_code = ? LIMIT 1
`

func (q *Queries) GetDiscountByCode(ctx context.Context, dCode string) (Discount, error) {
	row := q.queryRow(ctx, q.getDiscountByCodeStmt, getDiscountByCode, dCode)
	var i Discount
	err := row.Scan(
		&i.DID,
		&i.DCode,
		&i.DDescription,
		&i.DStartTime,
		&i.DEndTime,
		&i.DZoneTime,
		&i.DIsDisabled,
		&i.DPriceType,
		&i.DValue,
	)
	return i, err
}

const getDiscountLink = `-- name: GetDiscountLink :one
SELECT dl_id, dl_discount_id, dl_items_id, dl_items_sub_category, dl_items_category FROM discount_link
WHERE dl_id = ? LIMIT 1
`

func (q *Queries) GetDiscountLink(ctx context.Context, dlID int32) (DiscountLink, error) {
	row := q.queryRow(ctx, q.getDiscountLinkStmt, getDiscountLink, dlID)
	var i DiscountLink
	err := row.Scan(
		&i.DlID,
		&i.DlDiscountID,
		&i.DlItemsID,
		&i.DlItemsSubCategory,
		&i.DlItemsCategory,
	)
	return i, err
}

const getGroupByName = `-- name: GetGroupByName :one
SELECT gu_id, gu_name, gu_description FROM ` + "`" + `groups_users` + "`" + `
WHERE gu_name = ? LIMIT 1
`

func (q *Queries) GetGroupByName(ctx context.Context, guName string) (GroupsUser, error) {
	row := q.queryRow(ctx, q.getGroupByNameStmt, getGroupByName, guName)
	var i GroupsUser
	err := row.Scan(&i.GuID, &i.GuName, &i.GuDescription)
	return i, err
}

const getGroupPrivilege = `-- name: GetGroupPrivilege :one
SELECT gp_id, gp_path FROM ` + "`" + `groups_privileges` + "`" + `
WHERE gp_id = ? LIMIT 1
`

func (q *Queries) GetGroupPrivilege(ctx context.Context, gpID int32) (GroupsPrivilege, error) {
	row := q.queryRow(ctx, q.getGroupPrivilegeStmt, getGroupPrivilege, gpID)
	var i GroupsPrivilege
	err := row.Scan(&i.GpID, &i.GpPath)
	return i, err
}

const getGroupPrivilegeLink = `-- name: GetGroupPrivilegeLink :one
SELECT gpl_id, gpl_groups_users_id, gpl_groups_privileges_id FROM ` + "`" + `groups_privileges_link` + "`" + `
WHERE gpl_id = ? LIMIT 1
`

func (q *Queries) GetGroupPrivilegeLink(ctx context.Context, gplID int32) (GroupsPrivilegesLink, error) {
	row := q.queryRow(ctx, q.getGroupPrivilegeLinkStmt, getGroupPrivilegeLink, gplID)
	var i GroupsPrivilegesLink
	err := row.Scan(&i.GplID, &i.GplGroupsUsersID, &i.GplGroupsPrivilegesID)
	return i, err
}

const getGroupPrivilegesByUserId = `-- name: GetGroupPrivilegesByUserId :many
SELECT DISTINCT p.gp_id, p.gp_path FROM groups_privileges p
INNER JOIN groups_privileges_link gp ON p.gp_id = gp.gpl_groups_privileges_id
INNER JOIN groups_users_link gul ON gp.gpl_groups_users_id = gul.gul_group_id 
INNER JOIN users u ON gul.gul_user_id = u.u_id
WHERE u.u_id = ? ORDER BY p.gp_id ASC
`

func (q *Queries) GetGroupPrivilegesByUserId(ctx context.Context, uID int32) ([]GroupsPrivilege, error) {
	rows, err := q.query(ctx, q.getGroupPrivilegesByUserIdStmt, getGroupPrivilegesByUserId, uID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsPrivilege{}
	for rows.Next() {
		var i GroupsPrivilege
		if err := rows.Scan(&i.GpID, &i.GpPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroupUser = `-- name: GetGroupUser :one
SELECT gu_id, gu_name, gu_description FROM ` + "`" + `groups_users` + "`" + `
WHERE gu_id = ? LIMIT 1
`

func (q *Queries) GetGroupUser(ctx context.Context, guID int32) (GroupsUser, error) {
	row := q.queryRow(ctx, q.getGroupUserStmt, getGroupUser, guID)
	var i GroupsUser
	err := row.Scan(&i.GuID, &i.GuName, &i.GuDescription)
	return i, err
}

const getGroupUserLink = `-- name: GetGroupUserLink :one
SELECT gul_id, gul_user_id, gul_group_id FROM ` + "`" + `groups_users_link` + "`" + `
WHERE gul_id = ? LIMIT 1
`

func (q *Queries) GetGroupUserLink(ctx context.Context, gulID int32) (GroupsUsersLink, error) {
	row := q.queryRow(ctx, q.getGroupUserLinkStmt, getGroupUserLink, gulID)
	var i GroupsUsersLink
	err := row.Scan(&i.GulID, &i.GulUserID, &i.GulGroupID)
	return i, err
}

const getGroupUserLinkByUser = `-- name: GetGroupUserLinkByUser :one
SELECT gul_id, gul_user_id, gul_group_id FROM ` + "`" + `groups_users_link` + "`" + `
WHERE gul_user_id = ? LIMIT 1
`

func (q *Queries) GetGroupUserLinkByUser(ctx context.Context, gulUserID int32) (GroupsUsersLink, error) {
	row := q.queryRow(ctx, q.getGroupUserLinkByUserStmt, getGroupUserLinkByUser, gulUserID)
	var i GroupsUsersLink
	err := row.Scan(&i.GulID, &i.GulUserID, &i.GulGroupID)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT i_id, i_title, i_description, i_price, i_quantity, i_picture_url, i_file_path, i_is_disabled, i_release_date FROM items
WHERE i_id = ? LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, iID int32) (Item, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, iID)
	var i Item
	err := row.Scan(
		&i.IID,
		&i.ITitle,
		&i.IDescription,
		&i.IPrice,
		&i.IQuantity,
		&i.IPictureUrl,
		&i.IFilePath,
		&i.IIsDisabled,
		&i.IReleaseDate,
	)
	return i, err
}

const getItemCategory = `-- name: GetItemCategory :one
SELECT ic_id, ic_name, ic_description, ic_picture_url FROM items_category
WHERE ic_id = ? LIMIT 1
`

func (q *Queries) GetItemCategory(ctx context.Context, icID int32) (ItemsCategory, error) {
	row := q.queryRow(ctx, q.getItemCategoryStmt, getItemCategory, icID)
	var i ItemsCategory
	err := row.Scan(
		&i.IcID,
		&i.IcName,
		&i.IcDescription,
		&i.IcPictureUrl,
	)
	return i, err
}

const getItemCategoryLink = `-- name: GetItemCategoryLink :one
SELECT icl_id, icl_items_sub_category_id, icl_items_category_id FROM ` + "`" + `items_category_link` + "`" + `
WHERE icl_id = ? LIMIT 1
`

func (q *Queries) GetItemCategoryLink(ctx context.Context, iclID int32) (ItemsCategoryLink, error) {
	row := q.queryRow(ctx, q.getItemCategoryLinkStmt, getItemCategoryLink, iclID)
	var i ItemsCategoryLink
	err := row.Scan(&i.IclID, &i.IclItemsSubCategoryID, &i.IclItemsCategoryID)
	return i, err
}

const getItemCategoryLinkBySubCategory = `-- name: GetItemCategoryLinkBySubCategory :one
SELECT 
    ic.ic_id, 
    ic.ic_name, 
    ic.ic_description, 
    ic.ic_picture_url
FROM 
    ` + "`" + `items_category` + "`" + ` ic
JOIN 
    ` + "`" + `items_category_link` + "`" + ` icl ON ic.ic_id = icl.icl_items_category_id
WHERE 
    icl.icl_items_sub_category_id = ? 
LIMIT 1
`

func (q *Queries) GetItemCategoryLinkBySubCategory(ctx context.Context, iclItemsSubCategoryID int32) (ItemsCategory, error) {
	row := q.queryRow(ctx, q.getItemCategoryLinkBySubCategoryStmt, getItemCategoryLinkBySubCategory, iclItemsSubCategoryID)
	var i ItemsCategory
	err := row.Scan(
		&i.IcID,
		&i.IcName,
		&i.IcDescription,
		&i.IcPictureUrl,
	)
	return i, err
}

const getItemReview = `-- name: GetItemReview :one
SELECT ir_id, ir_user_id, ir_items_id, ir_comments, ir_stars FROM items_reviews
WHERE ir_id = ? LIMIT 1
`

func (q *Queries) GetItemReview(ctx context.Context, irID int32) (ItemsReview, error) {
	row := q.queryRow(ctx, q.getItemReviewStmt, getItemReview, irID)
	var i ItemsReview
	err := row.Scan(
		&i.IrID,
		&i.IrUserID,
		&i.IrItemsID,
		&i.IrComments,
		&i.IrStars,
	)
	return i, err
}

const getItemSubCategory = `-- name: GetItemSubCategory :one
SELECT isc_id, isc_name, isc_description, isc_picture_url FROM items_sub_category
WHERE isc_id = ? LIMIT 1
`

func (q *Queries) GetItemSubCategory(ctx context.Context, iscID int32) (ItemsSubCategory, error) {
	row := q.queryRow(ctx, q.getItemSubCategoryStmt, getItemSubCategory, iscID)
	var i ItemsSubCategory
	err := row.Scan(
		&i.IscID,
		&i.IscName,
		&i.IscDescription,
		&i.IscPictureUrl,
	)
	return i, err
}

const getItemSubCategoryAndCategoryLinked = `-- name: GetItemSubCategoryAndCategoryLinked :one
SELECT 
    isc.isc_id,
    isc.isc_name,
    isc.isc_description,
    isc.isc_picture_url,
    ic.ic_name
FROM 
    items_sub_category isc
LEFT JOIN 
    items_category_link icl ON isc.isc_id = icl.icl_items_sub_category_id
LEFT JOIN 
    items_category ic ON icl.icl_items_category_id = ic.ic_id
WHERE 
    isc.isc_id = ? 
LIMIT 1
`

type GetItemSubCategoryAndCategoryLinkedRow struct {
	IscID          int32          `json:"isc_id"`
	IscName        string         `json:"isc_name"`
	IscDescription NullString `json:"isc_description"`
	IscPictureUrl  NullString `json:"isc_picture_url"`
	IcName         NullString `json:"ic_name"`
}

func (q *Queries) GetItemSubCategoryAndCategoryLinked(ctx context.Context, iscID int32) (GetItemSubCategoryAndCategoryLinkedRow, error) {
	row := q.queryRow(ctx, q.getItemSubCategoryAndCategoryLinkedStmt, getItemSubCategoryAndCategoryLinked, iscID)
	var i GetItemSubCategoryAndCategoryLinkedRow
	err := row.Scan(
		&i.IscID,
		&i.IscName,
		&i.IscDescription,
		&i.IscPictureUrl,
		&i.IcName,
	)
	return i, err
}

const getItemsSubCategoryLink = `-- name: GetItemsSubCategoryLink :one
SELECT iscl_id, iscl_items_id, iscl_sub_category_id FROM ` + "`" + `items_sub_category_link` + "`" + `
WHERE iscl_id = ? LIMIT 1
`

func (q *Queries) GetItemsSubCategoryLink(ctx context.Context, isclID int32) (ItemsSubCategoryLink, error) {
	row := q.queryRow(ctx, q.getItemsSubCategoryLinkStmt, getItemsSubCategoryLink, isclID)
	var i ItemsSubCategoryLink
	err := row.Scan(&i.IsclID, &i.IsclItemsID, &i.IsclSubCategoryID)
	return i, err
}

const getItemsSubCategoryLinkByItem = `-- name: GetItemsSubCategoryLinkByItem :one
SELECT 
    isc.isc_id,
    isc.isc_name,
    isc.isc_description,
    isc.isc_picture_url
FROM 
    items_sub_category_link iscl
JOIN 
    items_sub_category isc ON iscl.iscl_sub_category_id = isc.isc_id
WHERE 
    iscl.iscl_items_id = ? 
LIMIT 1
`

func (q *Queries) GetItemsSubCategoryLinkByItem(ctx context.Context, isclItemsID int32) (ItemsSubCategory, error) {
	row := q.queryRow(ctx, q.getItemsSubCategoryLinkByItemStmt, getItemsSubCategoryLinkByItem, isclItemsID)
	var i ItemsSubCategory
	err := row.Scan(
		&i.IscID,
		&i.IscName,
		&i.IscDescription,
		&i.IscPictureUrl,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT u_id, u_email, u_uid, u_register_date, u_is_disabled FROM users
WHERE u_id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, uID int32) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, uID)
	var i User
	err := row.Scan(
		&i.UID,
		&i.UEmail,
		&i.UUid,
		&i.URegisterDate,
		&i.UIsDisabled,
	)
	return i, err
}

const getUserBasket = `-- name: GetUserBasket :one

SELECT ub_id, ub_user_id, ub_items_id, ub_time_added, ub_quantity FROM users_basket
WHERE ub_id = ? LIMIT 1
`

func (q *Queries) GetUserBasket(ctx context.Context, ubID int32) (UsersBasket, error) {
	row := q.queryRow(ctx, q.getUserBasketStmt, getUserBasket, ubID)
	var i UsersBasket
	err := row.Scan(
		&i.UbID,
		&i.UbUserID,
		&i.UbItemsID,
		&i.UbTimeAdded,
		&i.UbQuantity,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT u_id, u_email, u_uid, u_register_date, u_is_disabled FROM users
WHERE u_email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, uEmail string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, uEmail)
	var i User
	err := row.Scan(
		&i.UID,
		&i.UEmail,
		&i.UUid,
		&i.URegisterDate,
		&i.UIsDisabled,
	)
	return i, err
}

const getUserWishList = `-- name: GetUserWishList :one

SELECT wl_id, wl_user_id, wl_items_id, wl_times_added FROM users_wishlist
WHERE wl_id = ? LIMIT 1
`

func (q *Queries) GetUserWishList(ctx context.Context, wlID int32) (UsersWishlist, error) {
	row := q.queryRow(ctx, q.getUserWishListStmt, getUserWishList, wlID)
	var i UsersWishlist
	err := row.Scan(
		&i.WlID,
		&i.WlUserID,
		&i.WlItemsID,
		&i.WlTimesAdded,
	)
	return i, err
}

const listActiveItems = `-- name: ListActiveItems :many
SELECT i_id, i_title, i_description, i_price, i_quantity, i_picture_url, i_file_path, i_is_disabled, i_release_date FROM items
WHERE i_is_disabled = ?
`

func (q *Queries) ListActiveItems(ctx context.Context, iIsDisabled bool) ([]Item, error) {
	rows, err := q.query(ctx, q.listActiveItemsStmt, listActiveItems, iIsDisabled)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Item{}
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.IID,
			&i.ITitle,
			&i.IDescription,
			&i.IPrice,
			&i.IQuantity,
			&i.IPictureUrl,
			&i.IFilePath,
			&i.IIsDisabled,
			&i.IReleaseDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppSettings = `-- name: ListAppSettings :many
SELECT as_id, as_key, as_value, as_description, as_last_updated FROM app_settings
ORDER BY as_id ASC
`

func (q *Queries) ListAppSettings(ctx context.Context) ([]AppSetting, error) {
	rows, err := q.query(ctx, q.listAppSettingsStmt, listAppSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AppSetting{}
	for rows.Next() {
		var i AppSetting
		if err := rows.Scan(
			&i.AsID,
			&i.AsKey,
			&i.AsValue,
			&i.AsDescription,
			&i.AsLastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscounts = `-- name: ListDiscounts :many
SELECT d_id, d_code, d_description, d_start_time, d_end_time, d_zone_time, d_is_disabled, d_price_type, d_value FROM discount
ORDER BY d_id ASC
`

func (q *Queries) ListDiscounts(ctx context.Context) ([]Discount, error) {
	rows, err := q.query(ctx, q.listDiscountsStmt, listDiscounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Discount{}
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.DID,
			&i.DCode,
			&i.DDescription,
			&i.DStartTime,
			&i.DEndTime,
			&i.DZoneTime,
			&i.DIsDisabled,
			&i.DPriceType,
			&i.DValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDiscountsLinks = `-- name: ListDiscountsLinks :many
SELECT dl_id, dl_discount_id, dl_items_id, dl_items_sub_category, dl_items_category FROM discount_link
ORDER BY dl_id ASC
`

func (q *Queries) ListDiscountsLinks(ctx context.Context) ([]DiscountLink, error) {
	rows, err := q.query(ctx, q.listDiscountsLinksStmt, listDiscountsLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscountLink{}
	for rows.Next() {
		var i DiscountLink
		if err := rows.Scan(
			&i.DlID,
			&i.DlDiscountID,
			&i.DlItemsID,
			&i.DlItemsSubCategory,
			&i.DlItemsCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupPrivilegesLink = `-- name: ListGroupPrivilegesLink :many
SELECT gpl_id, gpl_groups_users_id, gpl_groups_privileges_id FROM ` + "`" + `groups_privileges_link` + "`" + `
ORDER BY gpl_id ASC
`

func (q *Queries) ListGroupPrivilegesLink(ctx context.Context) ([]GroupsPrivilegesLink, error) {
	rows, err := q.query(ctx, q.listGroupPrivilegesLinkStmt, listGroupPrivilegesLink)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsPrivilegesLink{}
	for rows.Next() {
		var i GroupsPrivilegesLink
		if err := rows.Scan(&i.GplID, &i.GplGroupsUsersID, &i.GplGroupsPrivilegesID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsPrivileges = `-- name: ListGroupsPrivileges :many
SELECT gp_id, gp_path FROM ` + "`" + `groups_privileges` + "`" + `
ORDER BY gp_id ASC
`

func (q *Queries) ListGroupsPrivileges(ctx context.Context) ([]GroupsPrivilege, error) {
	rows, err := q.query(ctx, q.listGroupsPrivilegesStmt, listGroupsPrivileges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsPrivilege{}
	for rows.Next() {
		var i GroupsPrivilege
		if err := rows.Scan(&i.GpID, &i.GpPath); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsUserByUser = `-- name: ListGroupsUserByUser :many
SELECT gu.gu_id, gu.gu_name, gu.gu_description FROM ` + "`" + `groups_users` + "`" + ` gu
INNER JOIN ` + "`" + `groups_users_link` + "`" + ` gul ON gul.gul_group_id = gu.gu_id
WHERE gul.gul_user_id = ? ORDER BY gu.gu_id ASC
`

func (q *Queries) ListGroupsUserByUser(ctx context.Context, gulUserID int32) ([]GroupsUser, error) {
	rows, err := q.query(ctx, q.listGroupsUserByUserStmt, listGroupsUserByUser, gulUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsUser{}
	for rows.Next() {
		var i GroupsUser
		if err := rows.Scan(&i.GuID, &i.GuName, &i.GuDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsUsers = `-- name: ListGroupsUsers :many
SELECT gu_id, gu_name, gu_description FROM ` + "`" + `groups_users` + "`" + `
ORDER BY gu_id ASC
`

func (q *Queries) ListGroupsUsers(ctx context.Context) ([]GroupsUser, error) {
	rows, err := q.query(ctx, q.listGroupsUsersStmt, listGroupsUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsUser{}
	for rows.Next() {
		var i GroupsUser
		if err := rows.Scan(&i.GuID, &i.GuName, &i.GuDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGroupsUsersLink = `-- name: ListGroupsUsersLink :many
SELECT gul_id, gul_user_id, gul_group_id FROM ` + "`" + `groups_users_link` + "`" + `
ORDER BY gul_id ASC
`

func (q *Queries) ListGroupsUsersLink(ctx context.Context) ([]GroupsUsersLink, error) {
	rows, err := q.query(ctx, q.listGroupsUsersLinkStmt, listGroupsUsersLink)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GroupsUsersLink{}
	for rows.Next() {
		var i GroupsUsersLink
		if err := rows.Scan(&i.GulID, &i.GulUserID, &i.GulGroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemSubCategoryAndCategoryLinked = `-- name: ListItemSubCategoryAndCategoryLinked :many
SELECT 
    isc.isc_id,
    isc.isc_name,
    isc.isc_description,
    isc.isc_picture_url,
    ic.ic_name,
    COUNT(iscl.iscl_items_id) AS item_count
FROM 
    items_sub_category isc
LEFT JOIN 
    items_category_link icl ON isc.isc_id = icl.icl_items_sub_category_id
LEFT JOIN 
    items_category ic ON icl.icl_items_category_id = ic.ic_id
LEFT JOIN 
    items_sub_category_link iscl ON isc.isc_id = iscl.iscl_sub_category_id
GROUP BY 
    isc.isc_id,
    ic.ic_name
ORDER BY 
    isc.isc_id
`

type ListItemSubCategoryAndCategoryLinkedRow struct {
	IscID          int32          `json:"isc_id"`
	IscName        string         `json:"isc_name"`
	IscDescription NullString `json:"isc_description"`
	IscPictureUrl  NullString `json:"isc_picture_url"`
	IcName         NullString `json:"ic_name"`
	ItemCount      int64          `json:"item_count"`
}

func (q *Queries) ListItemSubCategoryAndCategoryLinked(ctx context.Context) ([]ListItemSubCategoryAndCategoryLinkedRow, error) {
	rows, err := q.query(ctx, q.listItemSubCategoryAndCategoryLinkedStmt, listItemSubCategoryAndCategoryLinked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListItemSubCategoryAndCategoryLinkedRow{}
	for rows.Next() {
		var i ListItemSubCategoryAndCategoryLinkedRow
		if err := rows.Scan(
			&i.IscID,
			&i.IscName,
			&i.IscDescription,
			&i.IscPictureUrl,
			&i.IcName,
			&i.ItemCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItems = `-- name: ListItems :many
SELECT 
    i.i_id, i.i_title, i.i_description, i.i_price, i.i_quantity, i.i_picture_url, i.i_file_path, i.i_is_disabled, i.i_release_date,
    isc.isc_name AS sub_category_name
FROM 
    items i
LEFT JOIN 
    items_sub_category_link iscl ON i.i_id = iscl.iscl_items_id
LEFT JOIN 
    items_sub_category isc ON iscl.iscl_sub_category_id = isc.isc_id
ORDER BY 
    i.i_id ASC
`

type ListItemsRow struct {
	IID             int32          `json:"i_id"`
	ITitle          string         `json:"i_title"`
	IDescription    NullString `json:"i_description"`
	IPrice          string         `json:"i_price"`
	IQuantity       NullInt32  `json:"i_quantity"`
	IPictureUrl     NullString `json:"i_picture_url"`
	IFilePath       NullString `json:"i_file_path"`
	IIsDisabled     bool           `json:"i_is_disabled"`
	IReleaseDate    time.Time      `json:"i_release_date"`
	SubCategoryName NullString `json:"sub_category_name"`
}

func (q *Queries) ListItems(ctx context.Context) ([]ListItemsRow, error) {
	rows, err := q.query(ctx, q.listItemsStmt, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListItemsRow{}
	for rows.Next() {
		var i ListItemsRow
		if err := rows.Scan(
			&i.IID,
			&i.ITitle,
			&i.IDescription,
			&i.IPrice,
			&i.IQuantity,
			&i.IPictureUrl,
			&i.IFilePath,
			&i.IIsDisabled,
			&i.IReleaseDate,
			&i.SubCategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsCategory = `-- name: ListItemsCategory :many
SELECT ic_id, ic_name, ic_description, ic_picture_url FROM items_category
ORDER BY ic_id ASC
`

func (q *Queries) ListItemsCategory(ctx context.Context) ([]ItemsCategory, error) {
	rows, err := q.query(ctx, q.listItemsCategoryStmt, listItemsCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsCategory{}
	for rows.Next() {
		var i ItemsCategory
		if err := rows.Scan(
			&i.IcID,
			&i.IcName,
			&i.IcDescription,
			&i.IcPictureUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsCategoryAndOccurence = `-- name: ListItemsCategoryAndOccurence :many
SELECT 
    ic.ic_id,
    ic.ic_name,
    ic.ic_description,
    ic.ic_picture_url,
    COUNT(DISTINCT isc.isc_id) AS ic_on_isc,
    COUNT(DISTINCT i.i_id) AS total_items_count
FROM 
    items_category ic
LEFT JOIN 
    items_category_link icl ON ic.ic_id = icl.icl_items_category_id
LEFT JOIN 
    items_sub_category isc ON icl.icl_items_sub_category_id = isc.isc_id
LEFT JOIN 
    items_sub_category_link iscl ON isc.isc_id = iscl.iscl_sub_category_id
LEFT JOIN 
    items i ON iscl.iscl_items_id = i.i_id
GROUP BY 
    ic.ic_id, ic.ic_name, ic.ic_description, ic.ic_picture_url
ORDER BY 
    ic.ic_id ASC
`

type ListItemsCategoryAndOccurenceRow struct {
	IcID            int32          `json:"ic_id"`
	IcName          string         `json:"ic_name"`
	IcDescription   NullString `json:"ic_description"`
	IcPictureUrl    NullString `json:"ic_picture_url"`
	IcOnIsc         int64          `json:"ic_on_isc"`
	TotalItemsCount int64          `json:"total_items_count"`
}

func (q *Queries) ListItemsCategoryAndOccurence(ctx context.Context) ([]ListItemsCategoryAndOccurenceRow, error) {
	rows, err := q.query(ctx, q.listItemsCategoryAndOccurenceStmt, listItemsCategoryAndOccurence)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListItemsCategoryAndOccurenceRow{}
	for rows.Next() {
		var i ListItemsCategoryAndOccurenceRow
		if err := rows.Scan(
			&i.IcID,
			&i.IcName,
			&i.IcDescription,
			&i.IcPictureUrl,
			&i.IcOnIsc,
			&i.TotalItemsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsCategoryLink = `-- name: ListItemsCategoryLink :many
SELECT icl_id, icl_items_sub_category_id, icl_items_category_id FROM ` + "`" + `items_category_link` + "`" + `
ORDER BY icl_id ASC
`

func (q *Queries) ListItemsCategoryLink(ctx context.Context) ([]ItemsCategoryLink, error) {
	rows, err := q.query(ctx, q.listItemsCategoryLinkStmt, listItemsCategoryLink)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsCategoryLink{}
	for rows.Next() {
		var i ItemsCategoryLink
		if err := rows.Scan(&i.IclID, &i.IclItemsSubCategoryID, &i.IclItemsCategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsCategoryLinkByCategory = `-- name: ListItemsCategoryLinkByCategory :many
SELECT icl_id, icl_items_sub_category_id, icl_items_category_id FROM ` + "`" + `items_category_link` + "`" + `
WHERE icl_items_category_id = ? ORDER BY icl_id ASC
`

func (q *Queries) ListItemsCategoryLinkByCategory(ctx context.Context, iclItemsCategoryID int32) ([]ItemsCategoryLink, error) {
	rows, err := q.query(ctx, q.listItemsCategoryLinkByCategoryStmt, listItemsCategoryLinkByCategory, iclItemsCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsCategoryLink{}
	for rows.Next() {
		var i ItemsCategoryLink
		if err := rows.Scan(&i.IclID, &i.IclItemsSubCategoryID, &i.IclItemsCategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsReviews = `-- name: ListItemsReviews :many
SELECT ir_id, ir_user_id, ir_items_id, ir_comments, ir_stars FROM items_reviews
ORDER BY ir_id ASC
`

func (q *Queries) ListItemsReviews(ctx context.Context) ([]ItemsReview, error) {
	rows, err := q.query(ctx, q.listItemsReviewsStmt, listItemsReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsReview{}
	for rows.Next() {
		var i ItemsReview
		if err := rows.Scan(
			&i.IrID,
			&i.IrUserID,
			&i.IrItemsID,
			&i.IrComments,
			&i.IrStars,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsReviewsByItemId = `-- name: ListItemsReviewsByItemId :many
SELECT ir_id, ir_user_id, ir_items_id, ir_comments, ir_stars FROM items_reviews
WHERE ir_items_id = ?
`

func (q *Queries) ListItemsReviewsByItemId(ctx context.Context, irItemsID int32) ([]ItemsReview, error) {
	rows, err := q.query(ctx, q.listItemsReviewsByItemIdStmt, listItemsReviewsByItemId, irItemsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsReview{}
	for rows.Next() {
		var i ItemsReview
		if err := rows.Scan(
			&i.IrID,
			&i.IrUserID,
			&i.IrItemsID,
			&i.IrComments,
			&i.IrStars,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsReviewsByUserId = `-- name: ListItemsReviewsByUserId :many
SELECT ir_id, ir_user_id, ir_items_id, ir_comments, ir_stars FROM items_reviews
WHERE ir_user_id = ?
`

func (q *Queries) ListItemsReviewsByUserId(ctx context.Context, irUserID int32) ([]ItemsReview, error) {
	rows, err := q.query(ctx, q.listItemsReviewsByUserIdStmt, listItemsReviewsByUserId, irUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsReview{}
	for rows.Next() {
		var i ItemsReview
		if err := rows.Scan(
			&i.IrID,
			&i.IrUserID,
			&i.IrItemsID,
			&i.IrComments,
			&i.IrStars,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsSubCategory = `-- name: ListItemsSubCategory :many
SELECT isc_id, isc_name, isc_description, isc_picture_url FROM items_sub_category
ORDER BY isc_id ASC
`

func (q *Queries) ListItemsSubCategory(ctx context.Context) ([]ItemsSubCategory, error) {
	rows, err := q.query(ctx, q.listItemsSubCategoryStmt, listItemsSubCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsSubCategory{}
	for rows.Next() {
		var i ItemsSubCategory
		if err := rows.Scan(
			&i.IscID,
			&i.IscName,
			&i.IscDescription,
			&i.IscPictureUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsSubCategoryLink = `-- name: ListItemsSubCategoryLink :many
SELECT iscl_id, iscl_items_id, iscl_sub_category_id FROM ` + "`" + `items_sub_category_link` + "`" + `
ORDER BY iscl_id ASC
`

func (q *Queries) ListItemsSubCategoryLink(ctx context.Context) ([]ItemsSubCategoryLink, error) {
	rows, err := q.query(ctx, q.listItemsSubCategoryLinkStmt, listItemsSubCategoryLink)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsSubCategoryLink{}
	for rows.Next() {
		var i ItemsSubCategoryLink
		if err := rows.Scan(&i.IsclID, &i.IsclItemsID, &i.IsclSubCategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listItemsSubCategoryLinkByCategory = `-- name: ListItemsSubCategoryLinkByCategory :many
SELECT iscl_id, iscl_items_id, iscl_sub_category_id FROM ` + "`" + `items_sub_category_link` + "`" + `
WHERE iscl_sub_category_id = ? ORDER BY iscl_id ASC
`

func (q *Queries) ListItemsSubCategoryLinkByCategory(ctx context.Context, isclSubCategoryID int32) ([]ItemsSubCategoryLink, error) {
	rows, err := q.query(ctx, q.listItemsSubCategoryLinkByCategoryStmt, listItemsSubCategoryLinkByCategory, isclSubCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ItemsSubCategoryLink{}
	for rows.Next() {
		var i ItemsSubCategoryLink
		if err := rows.Scan(&i.IsclID, &i.IsclItemsID, &i.IsclSubCategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserBasketByUser = `-- name: ListUserBasketByUser :many

SELECT ub_id, ub_user_id, ub_items_id, ub_time_added, ub_quantity FROM users_basket
WHERE ub_user_id = ?
`

func (q *Queries) ListUserBasketByUser(ctx context.Context, ubUserID int32) ([]UsersBasket, error) {
	rows, err := q.query(ctx, q.listUserBasketByUserStmt, listUserBasketByUser, ubUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UsersBasket{}
	for rows.Next() {
		var i UsersBasket
		if err := rows.Scan(
			&i.UbID,
			&i.UbUserID,
			&i.UbItemsID,
			&i.UbTimeAdded,
			&i.UbQuantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserWishListByUser = `-- name: ListUserWishListByUser :many

SELECT wl_id, wl_user_id, wl_items_id, wl_times_added FROM users_wishlist
WHERE wl_user_id = ?
`

func (q *Queries) ListUserWishListByUser(ctx context.Context, wlUserID int32) ([]UsersWishlist, error) {
	rows, err := q.query(ctx, q.listUserWishListByUserStmt, listUserWishListByUser, wlUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UsersWishlist{}
	for rows.Next() {
		var i UsersWishlist
		if err := rows.Scan(
			&i.WlID,
			&i.WlUserID,
			&i.WlItemsID,
			&i.WlTimesAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT u_id, u_email, u_uid, u_register_date, u_is_disabled FROM users
ORDER BY u_id ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UID,
			&i.UEmail,
			&i.UUid,
			&i.URegisterDate,
			&i.UIsDisabled,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppSettings = `-- name: UpdateAppSettings :execrows
UPDATE app_settings SET as_key = ?,as_value = ?, as_description = ?, as_last_updated = ? WHERE as_id = ?
`

type UpdateAppSettingsParams struct {
	AsKey         string         `json:"as_key"`
	AsValue       string         `json:"as_value"`
	AsDescription NullString `json:"as_description"`
	AsLastUpdated time.Time      `json:"as_last_updated"`
	AsID          int32          `json:"as_id"`
}

func (q *Queries) UpdateAppSettings(ctx context.Context, arg UpdateAppSettingsParams) (int64, error) {
	result, err := q.exec(ctx, q.updateAppSettingsStmt, updateAppSettings,
		arg.AsKey,
		arg.AsValue,
		arg.AsDescription,
		arg.AsLastUpdated,
		arg.AsID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateDiscount = `-- name: UpdateDiscount :execrows
UPDATE discount SET d_code = ?, d_description = ?, d_start_time = ?, d_end_time = ?, d_zone_time = ?, d_is_disabled = ?, d_price_type = ?, d_value = ?
WHERE d_id = ?
`

type UpdateDiscountParams struct {
	DCode        string         `json:"d_code"`
	DDescription NullString `json:"d_description"`
	DStartTime   NullTime   `json:"d_start_time"`
	DEndTime     NullTime   `json:"d_end_time"`
	DZoneTime    NullString `json:"d_zone_time"`
	DIsDisabled  bool           `json:"d_is_disabled"`
	DPriceType   string         `json:"d_price_type"`
	DValue       int32          `json:"d_value"`
	DID          int32          `json:"d_id"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (int64, error) {
	result, err := q.exec(ctx, q.updateDiscountStmt, updateDiscount,
		arg.DCode,
		arg.DDescription,
		arg.DStartTime,
		arg.DEndTime,
		arg.DZoneTime,
		arg.DIsDisabled,
		arg.DPriceType,
		arg.DValue,
		arg.DID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateDiscountLink = `-- name: UpdateDiscountLink :execrows
UPDATE discount_link
SET dl_discount_id = ?, dl_items_id = ?, dl_items_sub_category = ?, dl_items_category = ?
WHERE dl_id = ?
`

type UpdateDiscountLinkParams struct {
	DlDiscountID       int32         `json:"dl_discount_id"`
	DlItemsID          NullInt32 `json:"dl_items_id"`
	DlItemsSubCategory NullInt32 `json:"dl_items_sub_category"`
	DlItemsCategory    NullInt32 `json:"dl_items_category"`
	DlID               int32         `json:"dl_id"`
}

func (q *Queries) UpdateDiscountLink(ctx context.Context, arg UpdateDiscountLinkParams) (int64, error) {
	result, err := q.exec(ctx, q.updateDiscountLinkStmt, updateDiscountLink,
		arg.DlDiscountID,
		arg.DlItemsID,
		arg.DlItemsSubCategory,
		arg.DlItemsCategory,
		arg.DlID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateGroupPrivilege = `-- name: UpdateGroupPrivilege :execrows
UPDATE ` + "`" + `groups_privileges` + "`" + ` SET gp_path = ? 
WHERE gp_id = ?
`

type UpdateGroupPrivilegeParams struct {
	GpPath NullString `json:"gp_path"`
	GpID   int32          `json:"gp_id"`
}

func (q *Queries) UpdateGroupPrivilege(ctx context.Context, arg UpdateGroupPrivilegeParams) (int64, error) {
	result, err := q.exec(ctx, q.updateGroupPrivilegeStmt, updateGroupPrivilege, arg.GpPath, arg.GpID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateGroupPrivilegeLink = `-- name: UpdateGroupPrivilegeLink :execrows
UPDATE ` + "`" + `groups_privileges_link` + "`" + ` SET gpl_groups_users_id = ? , gpl_groups_privileges_id = ?
WHERE gpl_id = ?
`

type UpdateGroupPrivilegeLinkParams struct {
	GplGroupsUsersID      int32 `json:"gpl_groups_users_id"`
	GplGroupsPrivilegesID int32 `json:"gpl_groups_privileges_id"`
	GplID                 int32 `json:"gpl_id"`
}

func (q *Queries) UpdateGroupPrivilegeLink(ctx context.Context, arg UpdateGroupPrivilegeLinkParams) (int64, error) {
	result, err := q.exec(ctx, q.updateGroupPrivilegeLinkStmt, updateGroupPrivilegeLink, arg.GplGroupsUsersID, arg.GplGroupsPrivilegesID, arg.GplID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateGroupUser = `-- name: UpdateGroupUser :execrows
UPDATE ` + "`" + `groups_users` + "`" + ` SET gu_name = ?, gu_description = ? WHERE gu_id = ?
`

type UpdateGroupUserParams struct {
	GuName        string         `json:"gu_name"`
	GuDescription NullString `json:"gu_description"`
	GuID          int32          `json:"gu_id"`
}

func (q *Queries) UpdateGroupUser(ctx context.Context, arg UpdateGroupUserParams) (int64, error) {
	result, err := q.exec(ctx, q.updateGroupUserStmt, updateGroupUser, arg.GuName, arg.GuDescription, arg.GuID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateGroupUserLink = `-- name: UpdateGroupUserLink :execrows
UPDATE ` + "`" + `groups_users_link` + "`" + ` SET gul_user_id = ? , gul_group_id = ?
WHERE gul_id = ?
`

type UpdateGroupUserLinkParams struct {
	GulUserID  int32 `json:"gul_user_id"`
	GulGroupID int32 `json:"gul_group_id"`
	GulID      int32 `json:"gul_id"`
}

func (q *Queries) UpdateGroupUserLink(ctx context.Context, arg UpdateGroupUserLinkParams) (int64, error) {
	result, err := q.exec(ctx, q.updateGroupUserLinkStmt, updateGroupUserLink, arg.GulUserID, arg.GulGroupID, arg.GulID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItem = `-- name: UpdateItem :execrows
UPDATE items SET i_title = ?,i_description = ?, i_price = ?, i_quantity = ?  , i_picture_url = ? , i_file_path = ? , i_is_disabled =  ? , i_release_date = ? WHERE i_id = ?
`

type UpdateItemParams struct {
	ITitle       string         `json:"i_title"`
	IDescription NullString `json:"i_description"`
	IPrice       string         `json:"i_price"`
	IQuantity    NullInt32  `json:"i_quantity"`
	IPictureUrl  NullString `json:"i_picture_url"`
	IFilePath    NullString `json:"i_file_path"`
	IIsDisabled  bool           `json:"i_is_disabled"`
	IReleaseDate time.Time      `json:"i_release_date"`
	IID          int32          `json:"i_id"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemStmt, updateItem,
		arg.ITitle,
		arg.IDescription,
		arg.IPrice,
		arg.IQuantity,
		arg.IPictureUrl,
		arg.IFilePath,
		arg.IIsDisabled,
		arg.IReleaseDate,
		arg.IID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItemCategory = `-- name: UpdateItemCategory :execrows
UPDATE items_category SET ic_name = ?, ic_description = ? , ic_picture_url = ? WHERE ic_id = ?
`

type UpdateItemCategoryParams struct {
	IcName        string         `json:"ic_name"`
	IcDescription NullString `json:"ic_description"`
	IcPictureUrl  NullString `json:"ic_picture_url"`
	IcID          int32          `json:"ic_id"`
}

func (q *Queries) UpdateItemCategory(ctx context.Context, arg UpdateItemCategoryParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemCategoryStmt, updateItemCategory,
		arg.IcName,
		arg.IcDescription,
		arg.IcPictureUrl,
		arg.IcID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItemSubCategory = `-- name: UpdateItemSubCategory :execrows
UPDATE items_sub_category SET isc_name = ?, isc_description  = ? , isc_picture_url = ? WHERE isc_id = ?
`

type UpdateItemSubCategoryParams struct {
	IscName        string         `json:"isc_name"`
	IscDescription NullString `json:"isc_description"`
	IscPictureUrl  NullString `json:"isc_picture_url"`
	IscID          int32          `json:"isc_id"`
}

func (q *Queries) UpdateItemSubCategory(ctx context.Context, arg UpdateItemSubCategoryParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemSubCategoryStmt, updateItemSubCategory,
		arg.IscName,
		arg.IscDescription,
		arg.IscPictureUrl,
		arg.IscID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItemsCategoryLink = `-- name: UpdateItemsCategoryLink :execrows
UPDATE ` + "`" + `items_category_link` + "`" + ` SET icl_items_sub_category_id = ? , icl_items_category_id = ?
WHERE icl_id = ?
`

type UpdateItemsCategoryLinkParams struct {
	IclItemsSubCategoryID int32 `json:"icl_items_sub_category_id"`
	IclItemsCategoryID    int32 `json:"icl_items_category_id"`
	IclID                 int32 `json:"icl_id"`
}

func (q *Queries) UpdateItemsCategoryLink(ctx context.Context, arg UpdateItemsCategoryLinkParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemsCategoryLinkStmt, updateItemsCategoryLink, arg.IclItemsSubCategoryID, arg.IclItemsCategoryID, arg.IclID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItemsCategoryLinkBySubCategory = `-- name: UpdateItemsCategoryLinkBySubCategory :execrows
UPDATE ` + "`" + `items_category_link` + "`" + ` SET  icl_items_category_id = ?
WHERE icl_items_sub_category_id = ?
`

type UpdateItemsCategoryLinkBySubCategoryParams struct {
	IclItemsCategoryID    int32 `json:"icl_items_category_id"`
	IclItemsSubCategoryID int32 `json:"icl_items_sub_category_id"`
}

func (q *Queries) UpdateItemsCategoryLinkBySubCategory(ctx context.Context, arg UpdateItemsCategoryLinkBySubCategoryParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemsCategoryLinkBySubCategoryStmt, updateItemsCategoryLinkBySubCategory, arg.IclItemsCategoryID, arg.IclItemsSubCategoryID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItemsSubCategoryLink = `-- name: UpdateItemsSubCategoryLink :execrows
UPDATE ` + "`" + `items_sub_category_link` + "`" + ` SET iscl_items_id = ? , iscl_sub_category_id = ?
WHERE iscl_id = ?
`

type UpdateItemsSubCategoryLinkParams struct {
	IsclItemsID       int32 `json:"iscl_items_id"`
	IsclSubCategoryID int32 `json:"iscl_sub_category_id"`
	IsclID            int32 `json:"iscl_id"`
}

func (q *Queries) UpdateItemsSubCategoryLink(ctx context.Context, arg UpdateItemsSubCategoryLinkParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemsSubCategoryLinkStmt, updateItemsSubCategoryLink, arg.IsclItemsID, arg.IsclSubCategoryID, arg.IsclID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateItemsSubCategoryLinkByItem = `-- name: UpdateItemsSubCategoryLinkByItem :execrows
UPDATE ` + "`" + `items_sub_category_link` + "`" + ` SET iscl_sub_category_id = ?
WHERE iscl_items_id = ?
`

type UpdateItemsSubCategoryLinkByItemParams struct {
	IsclSubCategoryID int32 `json:"iscl_sub_category_id"`
	IsclItemsID       int32 `json:"iscl_items_id"`
}

func (q *Queries) UpdateItemsSubCategoryLinkByItem(ctx context.Context, arg UpdateItemsSubCategoryLinkByItemParams) (int64, error) {
	result, err := q.exec(ctx, q.updateItemsSubCategoryLinkByItemStmt, updateItemsSubCategoryLinkByItem, arg.IsclSubCategoryID, arg.IsclItemsID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateUser = `-- name: UpdateUser :execrows
UPDATE users SET u_email = ?,u_uid = ?, u_register_date = ?, u_is_disabled = ? WHERE u_id = ?
`

type UpdateUserParams struct {
	UEmail        string    `json:"u_email"`
	UUid          string    `json:"u_uid"`
	URegisterDate time.Time `json:"u_register_date"`
	UIsDisabled   bool      `json:"u_is_disabled"`
	UID           int32     `json:"u_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	result, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.UEmail,
		arg.UUid,
		arg.URegisterDate,
		arg.UIsDisabled,
		arg.UID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
